{
  "filename": "java-utils.md",
  "__html": "<h1>java常用工具库使用</h1>\n<p><img src=\"../img/java-utils-1.png\" alt=\"java-utils\"></p>\n<h2>字符串相关工具类</h2>\n<p>Java 中 String 应该是日常用的最多一个类吧，平常我们很多代码需要围绕 String ，做一些处理。</p>\n<p>JDK 提供 String API 虽然比较多，但是功能比较基础，通常我们需要结合 String 多个方法才能完成一个业务功能。\n下面介绍一下 Apache 提供的一个工具类 StringUtils.\nMaven Pom 信息如下：</p>\n<pre><code class=\"language-pom\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n    &lt;version&gt;3.10&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>commons-lang 有两个版本，一个是  commons-lang3 ，一个是 commons-lang 。\ncommons-lang 是老版本，已经很久没有维护了。\ncommons-lang3 是一直在维护的版本，推荐直接使用这个版本。\n注意：如果你系统已经有 commons-lang，注意如果直接替换成 commons-lang3，将会编译错误。commons-lang3 中相关类与 commons-lang 一样，但是包名不一样。</p>\n</blockquote>\n<h3>判断字符串是否为空</h3>\n<p>判断字符串是否为空，想必每个人应该都写过吧：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == str || str.isEmpty()) {\n\n}\n</code></pre>\n<p>虽然这段代码非常简单，但是说实话，以前还是在这里犯过空指针的异常的。</p>\n<p>使用 StringUtils ，上面代码可以替换下面这样：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(str)) {\n\n}\n</code></pre>\n<p>StringUtils  内部还有一个方法 isBlank，也是用来判断字符串是否为空，两个方法比较相近，比较搞混，主要区别如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 如果字符串都是空格的话，</span>\nStringUtils.isBlank(<span class=\"hljs-string\">\" \"</span>)       = <span class=\"hljs-keyword\">true</span>;\nStringUtils.isEmpty(<span class=\"hljs-string\">\" \"</span>)       = <span class=\"hljs-keyword\">false</span>；   \n</code></pre>\n<h3>字符串固定长度</h3>\n<p>这个通常用于字符串需要固定长度的场景，比如需要固定长度字符串作为流水号，若流水号长度不足，，左边补 0 。\n这里当然可以使用 String#format 方法，不过阿粉觉得比较麻烦，这里可以这样使用：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 字符串固定长度 8位，若不足，往左补 0</span>\nStringUtils.leftPad(<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">\"0\"</span>);\n</code></pre>\n<p>另外还有一个 StringUtils#rightPad,这个方法与上面方法正好相反。</p>\n<h3>字符串关键字替换</h3>\n<p>StringUtils 提供一些列的方法，可以替换某些关键字：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 默认替换所有关键字</span>\nStringUtils.replace(<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"z\"</span>)   = <span class=\"hljs-string\">\"zbz\"</span>;\n<span class=\"hljs-comment\">// 替换关键字，仅替换一次</span>\nStringUtils.replaceOnce(<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"z\"</span>)   = <span class=\"hljs-string\">\"zba\"</span>;\n<span class=\"hljs-comment\">// 使用正则表达式替换</span>\nStringUtils.replacePattern(<span class=\"hljs-string\">\"ABCabc123\"</span>, <span class=\"hljs-string\">\"[^A-Z0-9]+\"</span>, <span class=\"hljs-string\">\"\"</span>)   = <span class=\"hljs-string\">\"ABC123\"</span>；\n....   \n</code></pre>\n<h3>字符串拼接</h3>\n<p>字符串拼接是个常见的需求，简单办法使用 StringBuilder 循环遍历拼接：</p>\n<pre><code class=\"language-java\">String[] array = <span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-string\">\"1234\"</span>, <span class=\"hljs-string\">\"5678\"</span>};\nStringBuilder stringBuilder = <span class=\"hljs-keyword\">new</span> StringBuilder();\n\n<span class=\"hljs-keyword\">for</span> (String s : array) {\n    stringBuilder.append(s).append(<span class=\"hljs-string\">\";\"</span>);\n}\n<span class=\"hljs-comment\">// 防止最终拼接字符串为空 </span>\n<span class=\"hljs-keyword\">if</span> (stringBuilder.length() &gt; <span class=\"hljs-number\">0</span>) {\n    stringBuilder.deleteCharAt(stringBuilder.length() - <span class=\"hljs-number\">1</span>);\n}\nSystem.out.println(stringBuilder.toString());\n</code></pre>\n<p>上面业务代码不太难，但是需要注意一下上面这段代码非常容易出错，容易抛出 StringIndexOutOfBoundsException。</p>\n<p>这里我们可以直接使用以下方法获取拼接之后字符串：</p>\n<pre><code class=\"language-java\">StringUtils.join([<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>], <span class=\"hljs-string\">\",\"</span>)    = <span class=\"hljs-string\">\"a,b,c\"</span>\n</code></pre>\n<p>StringUtils 只能传入数组拼接字符串，不过我比较喜欢集合拼接，所以再推荐下 Guava 的 Joiner。</p>\n<p>实例代码如下：</p>\n<pre><code class=\"language-java\">String[] array = <span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-string\">\"1234\"</span>, <span class=\"hljs-string\">\"5678\"</span>};\nList&lt;String&gt; list=<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\nlist.add(<span class=\"hljs-string\">\"test\"</span>);\nlist.add(<span class=\"hljs-string\">\"1234\"</span>);\nlist.add(<span class=\"hljs-string\">\"5678\"</span>);\nStringUtils.join(array, <span class=\"hljs-string\">\",\"</span>);\n\n<span class=\"hljs-comment\">// 逗号分隔符，跳过 null</span>\nJoiner joiner=Joiner.on(<span class=\"hljs-string\">\",\"</span>).skipNulls();\njoiner.join(array);\njoiner.join(list);\n</code></pre>\n<h3>字符串拆分</h3>\n<p>有字符串拼接，就会有拆分字符串的需求，同样的 StringUtils 也有拆分字符串的方法。</p>\n<pre><code class=\"language-java\">StringUtils.split(<span class=\"hljs-string\">\"a..b.c\"</span>, <span class=\"hljs-string\">'.'</span>)   = [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]\nStringUtils.splitByWholeSeparatorPreserveAllTokens(<span class=\"hljs-string\">\"a..b.c\"</span>, <span class=\"hljs-string\">\".\"</span>)= [<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]\n</code></pre>\n<blockquote>\n<p>ps:注意以上两个方法区别。</p>\n</blockquote>\n<p>StringUtils 拆分之后得到是一个数组，我们可以使用 Guava 的</p>\n<pre><code class=\"language-java\">Splitter splitter = Splitter.on(<span class=\"hljs-string\">\",\"</span>);\n<span class=\"hljs-comment\">// 返回是一个 List 集合，结果：[ab, , b, c]</span>\nsplitter.splitToList(<span class=\"hljs-string\">\"ab,,b,c\"</span>);\n<span class=\"hljs-comment\">// 忽略空字符串，输出结果 [ab, b, c]</span>\nsplitter.omitEmptyStrings().splitToList(<span class=\"hljs-string\">\"ab,,b,c\"</span>)\n</code></pre>\n<p>StringUtils 内部还有其他常用的方法，小伙伴可以自行查看其 API。</p>\n<h2>日期相关工具类</h2>\n<h3>DateUtils/DateFormatUtils</h3>\n<p>JDK8 之前，Java 只提供一个 Date 类，平常我们需要将 Date 按照一定格式转化成字符串，我们需要使用 SimpleDateFormat。</p>\n<pre><code class=\"language-java\">SimpleDateFormat simpleDateFormat=<span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>);\n<span class=\"hljs-comment\">// Date 转 字符串</span>\nsimpleDateFormat.format(<span class=\"hljs-keyword\">new</span> Date());\n<span class=\"hljs-comment\">// 字符串 转 Date</span>\nsimpleDateFormat.parse(<span class=\"hljs-string\">\"2020-05-07 22:00:00\"</span>);\n</code></pre>\n<p>代码虽然简单，但是这里需要注意 SimpleDateFormat，不是线程安全的，多线程环境一定要注意使用安全。\n这里阿粉推荐  commons-lang3 下的时间工具类DateUtils/DateFormatUtils,解决 Date 与字符串转化问题。</p>\n<blockquote>\n<p>ps:吐槽一下，你们工程中有没有多个叫 DateUtils 类？阿粉发现我们现有工程，多个模块有提供这个类，每个实现大同小异。</p>\n</blockquote>\n<p>使用方法非常简单：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// Date 转化为字符串</span>\nDateFormatUtils.format(<span class=\"hljs-keyword\">new</span> Date(),<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>);\n<span class=\"hljs-comment\">// 字符串 转 Date</span>\nDateUtils.parseDate(<span class=\"hljs-string\">\"2020-05-07 22:00:00\"</span>,<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>);\n</code></pre>\n<p>除了格式转化之外，DateUtils 还提供时间计算的相关功能。</p>\n<pre><code class=\"language-java\">Date now = <span class=\"hljs-keyword\">new</span> Date();\n<span class=\"hljs-comment\">// Date 加 1 天</span>\nDate addDays = DateUtils.addDays(now, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// Date 加 33 分钟</span>\nDate addMinutes = DateUtils.addMinutes(now, <span class=\"hljs-number\">33</span>);\n<span class=\"hljs-comment\">// Date 减去 233 秒</span>\nDate addSeconds = DateUtils.addSeconds(now, -<span class=\"hljs-number\">233</span>);\n<span class=\"hljs-comment\">// 判断是否 Wie 同一天</span>\n<span class=\"hljs-keyword\">boolean</span> sameDay = DateUtils.isSameDay(addDays, addMinutes);\n<span class=\"hljs-comment\">// 过滤时分秒,若 now 为 2020-05-07 22:13:00 调用 truncate 方法以后</span>\n<span class=\"hljs-comment\">// 返回时间为 2020-05-07 00:00:00</span>\nDate truncate = DateUtils.truncate(now, Calendar.DATE);\n</code></pre>\n<h2>JDK8 时间类</h2>\n<p>JDK8 之后，Java 将日期与时间分为 LocalDate，LocalTime，功能定义更加清晰，当然其也提供一个 LocalDateTime，包含日期与时间。这些类相对于 Date 类优点在于，这些类与 String 类一样都是不变类型，不但线程安全，而且不能修改。</p>\n<blockquote>\n<p>ps：仔细对比 mysql 时间日期类型 DATE，TIME，DATETIME，有没有感觉差不多</p>\n</blockquote>\n<p>现在 mybatis 等 ORM 框架已经支持 LocalDate 与 JDBC 时间类型转化，所以大家可以直接将时间字段实际类型定义为 JDK8 时间类型，然后再进行相关转化。\n如果依然使用的是 Date 类型，如果需要使用新的时间类型，我们需要进行相关转化。两者之间进行转化， 稍微复杂一点，我们需要显示指定当前时区。</p>\n<pre><code class=\"language-java\">Date now = <span class=\"hljs-keyword\">new</span> Date();\n<span class=\"hljs-comment\">// Date-----&gt; LocalDateTime 这里指定使用当前系统默认时区</span>\nLocalDateTime localDateTime = now.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();\n<span class=\"hljs-comment\">// LocalDateTime------&gt; Date 这里指定使用当前系统默认时区</span>\nDate date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());\n</code></pre>\n<p>接下来我们使用 LocalDateTime 进行字符串格式化。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 按照 yyyy-MM-dd HH:mm:ss 转化时间</span>\nLocalDateTime dateTime = LocalDateTime.parse(<span class=\"hljs-string\">\"2020-05-07 22:34:00\"</span>, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>));\n<span class=\"hljs-comment\">// 将 LocalDateTime 格式化字符串</span>\nString format = DateTimeFormatter.ofPattern(<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(dateTime);\n</code></pre>\n<p>另外我们使用 LocalDateTime 获取当前时间年份，月份特别简单：</p>\n<pre><code class=\"language-java\">LocalDateTime now = LocalDateTime.now();\n<span class=\"hljs-comment\">// 年</span>\n<span class=\"hljs-keyword\">int</span> year = now.getYear();\n<span class=\"hljs-comment\">// 月</span>\n<span class=\"hljs-keyword\">int</span> month = now.getMonthValue();\n<span class=\"hljs-comment\">// 日</span>\n<span class=\"hljs-keyword\">int</span> day = now.getDayOfMonth();\n</code></pre>\n<p>最后我们还可以使用 LocalDateTime 进行日期加减，获取下一天的时间：</p>\n<pre><code class=\"language-java\">LocalDateTime now = LocalDateTime.now();\n<span class=\"hljs-comment\">// 当前时间加一天</span>\nLocalDateTime plusDays = now.plusDays(<span class=\"hljs-number\">1l</span>);\n<span class=\"hljs-comment\">// 当前时间减一个小时</span>\nLocalDateTime minusHours = now.minusHours(<span class=\"hljs-number\">1l</span>);\n<span class=\"hljs-comment\">// 还有很多其他方法</span>\n</code></pre>\n<p>总之 JDK8 提供的时间类非常好用，还没用过小伙伴，可以尝试下。</p>\n<h2>集合/数组相关</h2>\n<p>集合与数组我们日常也需要经常使用，也需要对其进行判空：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == list || list.isEmpty()) {\n\n}\n</code></pre>\n<blockquote>\n<p>ps: 数组、Map 集合与其类似</p>\n</blockquote>\n<p>上面代码如字符串判空一样写起来都非常简单，但是也比较容易写出会抛出空指针异常的代码。这里我们可以使用 commons-collections 提供工具类。</p>\n<p>pom 信息：</p>\n<pre><code class=\"language-pom\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;\n    &lt;version&gt;4.4&lt;/vesion&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>ps: 还有一个低版本的 ，artifactId 为 commons-collections</p>\n</blockquote>\n<p>我们可以使用 CollectionUtils/MapUtils进行判空判断。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// List/Set 集合判空</span>\n<span class=\"hljs-keyword\">if</span>(CollectionUtils.isEmpty(list)){\n\n}\n<span class=\"hljs-comment\">// Map 等集合进行判空</span>\n<span class=\"hljs-keyword\">if</span> (MapUtils.isEmpty(map)) {\n    \n}\n</code></pre>\n<p>至于数组判空判断需要使用 commons-lang 下的 ArrayUtils进行判断:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 数组判空</span>\n<span class=\"hljs-keyword\">if</span> (ArrayUtils.isEmpty(array)) {\n    \n}\n</code></pre>\n<p>除此之外还有一些列的对于集合增强方法，比如快速将数组加入到现有集合中：</p>\n<pre><code class=\"language-java\">List&lt;String&gt; listA = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\nlistA.add(<span class=\"hljs-string\">\"1\"</span>);\nlistA.add(<span class=\"hljs-string\">\"2\"</span>);\nlistA.add(<span class=\"hljs-string\">\"3\"</span>);\nString[] arrays = <span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>};\nCollectionUtils.addAll(listA, arrays);\n</code></pre>\n<h2>I/O 相关</h2>\n<p>JDK 有提供一系列的类可以读取文件等，不过阿粉觉得那些类有些晦涩难懂，实现一个小功能可能还要写好多代码，而且还不一定能写对。\n阿粉推荐一下 Apache 提供的 commons-io 库，增强 I/O 操作，简化操作难度。pom 信息：</p>\n<pre><code class=\"language-pom\">&lt;dependency&gt;\n    &lt;groupId&gt;commons-io&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n    &lt;version&gt;2.6&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>FileUtils-文件操作工具类</h3>\n<p>文件操作工具类提供一系列方法，可以让我们快速读取写入文件。\n快速实现文件/文件夹拷贝操作 ,FileUtils.copyDirectory/FileUtils.copyFile</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 拷贝文件</span>\nFile fileA = <span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"E:\\\\test\\\\test.txt\"</span>);\nFile fileB = <span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"E:\\\\test1\\\\test.txt\"</span>);\nFileUtils.copyFile(fileA,fileB);\n</code></pre>\n<p>使用 FileUtils.listFiles 获取指定文件夹上所有文件</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 按照指定文件后缀如java,txt等去查找指定文件夹的文件</span>\nFile directory = <span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"E:\\\\test\"</span>);\nFileUtils.listFiles(directory, <span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"txt\"</span>}, <span class=\"hljs-keyword\">false</span>);\n</code></pre>\n<p>使用 FileUtils.readLines 读取该文件所有行。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 读取指定文件所有行 不需要使用 while 循环读取流了</span>\nList&lt;String&gt; lines = FileUtils.readLines(fileA)\n</code></pre>\n<p>有读就存在写，可以使用 FileUtils.writeLines，直接将集合中数据，一行行写入文本。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 可以一行行写入文本</span>\nList&lt;String&gt; lines = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n.....\nFileUtils.writeLines(lines)\n</code></pre>\n<h3>IOUtils-I/O 操作相关工具类</h3>\n<p>FileUtils 主要针对相关文件操作，IOUtils 更加针对底层 I/O,可以快速读取 InputStream。实际上 FileUtils 底层操作依赖就是 IOUtils。\nIOUtils可以适用于一个比较试用的场景，比如支付场景下，HTTP 异步通知场景。如果我们使用 JDK 原生方法写:</p>\n<blockquote>\n<p>从 Servlet 获取异步通知内容</p>\n</blockquote>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">byte</span>[] b = <span class=\"hljs-keyword\">null</span>;\nByteArrayOutputStream baos = <span class=\"hljs-keyword\">null</span>;\nString respMsg = <span class=\"hljs-keyword\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">1024</span>];\n    baos = <span class=\"hljs-keyword\">new</span> ByteArrayOutputStream();\n   <span class=\"hljs-comment\">// 获取输入流</span>\n    InputStream in = request.getInputStream();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-number\">0</span>; (len = in.read(buffer)) &gt; <span class=\"hljs-number\">0</span>; ) {\n        baos.write(buffer, <span class=\"hljs-number\">0</span>, len);\n    }\n    b = baos.toByteArray();\n    baos.close();\n   <span class=\"hljs-comment\">// 字节数组转化成字符串</span>\n    String reqMessage = <span class=\"hljs-keyword\">new</span> String(b, <span class=\"hljs-string\">\"utf-8\"</span>);\n} <span class=\"hljs-keyword\">catch</span> (IOException e) {\n  \n} <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">if</span> (baos != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">try</span> {\n            baos.close();\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n           \n        }\n    }\n}\n</code></pre>\n<p>上面代码说起来还是挺复杂的。不过我们使用 IOUtils，一个方法就可以简单搞定：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 将输入流信息全部输出到字节数组中</span>\n<span class=\"hljs-keyword\">byte</span>[] b = IOUtils.toByteArray(request.getInputStream());\n<span class=\"hljs-comment\">// 将输入流信息转化为字符串</span>\nString resMsg = IOUtils.toString(request.getInputStream());\n</code></pre>\n<blockquote>\n<p>ps: InputStream 不能被重复读取</p>\n</blockquote>\n<h3>计时</h3>\n<p>编程中有时需要统计代码的的执行耗时，当然执行代码非常简单，结束时间与开始时间相减即可。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">long</span> start = System.currentTimeMillis();   <span class=\"hljs-comment\">//获取开始时间</span>\n\n<span class=\"hljs-comment\">//其他代码</span>\n<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">long</span> end = System.currentTimeMillis(); <span class=\"hljs-comment\">//获取结束时间</span>\n\nSystem.out.println(<span class=\"hljs-string\">\"程序运行时间： \"</span> + (end - start) + <span class=\"hljs-string\">\"ms\"</span>);\n</code></pre>\n<p>虽然代码很简单，但是非常不灵活，默认情况我们只能获取 ms 单位，如果需要转换为秒，分钟，就需要另外再计算。</p>\n<p>这里我们介绍 Guava Stopwatch 计时工具类，借助他统计程序执行时间，使用方式非常灵活。</p>\n<blockquote>\n<p>commons-lang3 与 Spring-core 也有这个工具类，使用方式大同小异，大家根据情况选择。</p>\n</blockquote>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 创建之后立刻计时，若想主动开始计时</span>\nStopwatch stopwatch = Stopwatch.createStarted();\n<span class=\"hljs-comment\">// 创建计时器，但是需要主动调用 start 方法开始计时</span>\n<span class=\"hljs-comment\">// Stopwatch stopwatch = Stopwatch.createUnstarted();</span>\n<span class=\"hljs-comment\">// stopWatch.start();</span>\n<span class=\"hljs-comment\">// 模拟其他代码耗时</span>\nTimeUnit.SECONDS.sleep(<span class=\"hljs-number\">2l</span>);\n\n<span class=\"hljs-comment\">// 当前已经消耗的时间</span>\nSystem.out.println(stopwatch.elapsed(TimeUnit.SECONDS));;\n\nTimeUnit.SECONDS.sleep(<span class=\"hljs-number\">2l</span>);\n\n<span class=\"hljs-comment\">// 停止计时 未开始的计时器调用 stop 将会抛错 IllegalStateException</span>\nstopwatch.stop();\n<span class=\"hljs-comment\">// 再次统计总耗时</span>\nSystem.out.println(stopwatch.elapsed(TimeUnit.SECONDS));;\n<span class=\"hljs-comment\">// 重新开始，将会在原来时间基础计算，若想重新从 0开始计算，需要调用 stopwatch.reset()</span>\nstopwatch.start();\nTimeUnit.SECONDS.sleep(<span class=\"hljs-number\">2l</span>);\nSystem.out.println(stopwatch.elapsed(TimeUnit.SECONDS));\n</code></pre>\n<p>输出结果为：</p>\n<pre><code>2\n4\n6\n</code></pre>\n",
  "link": "\\en-us\\blog\\java\\java-utils.html",
  "meta": {}
}