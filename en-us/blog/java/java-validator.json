{
  "filename": "java-validator.md",
  "__html": "<h1>Validator 注解使用</h1>\n<h2>为什么要用validator</h2>\n<ul>\n<li>javax.validation的一系列注解可以帮我们完成参数校验,免去繁琐的串行校验</li>\n</ul>\n<p>不然我们的代码就像下面这样:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n     * 走串行校验\n     *\n     * <span class=\"hljs-doctag\">@param</span> userVO\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"/save/serial\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(@RequestBody UserVO userVO)</span> </span>{\n        String mobile = userVO.getMobile();\n\n        <span class=\"hljs-comment\">//手动逐个 参数校验~ 写法</span>\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(mobile)) {\n            <span class=\"hljs-keyword\">return</span> RspDTO.paramFail(<span class=\"hljs-string\">\"mobile:手机号码不能为空\"</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!Pattern.matches(<span class=\"hljs-string\">\"^[1][3,4,5,6,7,8,9][0-9]{9}$\"</span>, mobile)) {\n            <span class=\"hljs-keyword\">return</span> RspDTO.paramFail(<span class=\"hljs-string\">\"mobile:手机号码格式不对\"</span>);\n        }\n\n        <span class=\"hljs-comment\">//抛出自定义异常等~写法</span>\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(userVO.getUsername())) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> BizException(Constant.PARAM_FAIL_CODE, <span class=\"hljs-string\">\"用户名不能为空\"</span>);\n        }\n\n        <span class=\"hljs-comment\">// 比如写一个map返回</span>\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(userVO.getSex())) {\n            Map&lt;String, Object&gt; result = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;(<span class=\"hljs-number\">5</span>);\n            result.put(<span class=\"hljs-string\">\"code\"</span>, Constant.PARAM_FAIL_CODE);\n            result.put(<span class=\"hljs-string\">\"msg\"</span>, <span class=\"hljs-string\">\"性别不能为空\"</span>);\n            <span class=\"hljs-keyword\">return</span> result;\n        }\n        <span class=\"hljs-comment\">//.........各种写法 ...</span>\n        userService.save(userVO);\n        <span class=\"hljs-keyword\">return</span> RspDTO.success();\n  }\n\n</code></pre>\n<p>这被大佬看见,一定说,都9102了还这么写,然后被劝退了</p>\n<ul>\n<li>什么是javax.validation</li>\n</ul>\n<blockquote>\n<p>JSR303 是一套JavaBean参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们JavaBean的属性上面(面向注解编程的时代)，就可以在需要校验的时候进行校验了,在SpringBoot中已经包含在starter-web中,再其他项目中可以引用依赖,并自行调整版本:</p>\n</blockquote>\n<pre><code class=\"language-java\">&lt;!--jsr 303--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;javax.validation&lt;/groupId&gt;\n    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;\n    &lt;version&gt;1.1.0.Final&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- hibernate validator--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n    &lt;version&gt;5.2.0.Final&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p><img src=\"../img/java-validator-1.png\" alt=\"java-validator\"></p>\n<ul>\n<li>注解说明</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-number\">1</span>.<span class=\"hljs-meta\">@NotNull</span>：不能为<span class=\"hljs-keyword\">null</span>，但可以为empty(<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\" \"</span>,<span class=\"hljs-string\">\"   \"</span>)\n<span class=\"hljs-number\">2</span>.<span class=\"hljs-meta\">@NotEmpty</span>：不能为<span class=\"hljs-keyword\">null</span>，而且长度必须大于<span class=\"hljs-number\">0</span> (<span class=\"hljs-string\">\" \"</span>,<span class=\"hljs-string\">\"  \"</span>)\n<span class=\"hljs-number\">3</span>.<span class=\"hljs-meta\">@NotBlank</span>：只能作用在String上，不能为<span class=\"hljs-keyword\">null</span>，而且调用trim()后，长度必须大于<span class=\"hljs-number\">0</span>(<span class=\"hljs-string\">\"test\"</span>)    即：必须有实际字符\n\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>验证注解</th>\n<th style=\"text-align:center\">验证的数据类型</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@AssertFalse</td>\n<td style=\"text-align:center\">Boolean,boolean</td>\n<td style=\"text-align:right\">验证注解的元素值是false</td>\n</tr>\n<tr>\n<td>@AssertTrue</td>\n<td style=\"text-align:center\">Boolean,boolean</td>\n<td style=\"text-align:right\">验证注解的元素值是true</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td style=\"text-align:center\">任意类型</td>\n<td style=\"text-align:right\">验证注解的元素值不是null</td>\n</tr>\n<tr>\n<td>@Null</td>\n<td style=\"text-align:center\">任意类型</td>\n<td style=\"text-align:right\">验证注解的元素值是null</td>\n</tr>\n<tr>\n<td>@Min(value=值)</td>\n<td style=\"text-align:center\">BigDecimal，BigInteger, byte,short, int, long，等任何Number或CharSequence（存储的是数字）子类型</td>\n<td style=\"text-align:right\">验证注解的元素值大于等于@Min指定的value值</td>\n</tr>\n<tr>\n<td>@Max（value=值）</td>\n<td style=\"text-align:center\">和@Min要求一样</td>\n<td style=\"text-align:right\">验证注解的元素值小于等于@Max指定的value值</td>\n</tr>\n<tr>\n<td>@DecimalMin(value=值)</td>\n<td style=\"text-align:center\">和@Min要求一样</td>\n<td style=\"text-align:right\">验证注解的元素值大于等于@ DecimalMin指定的value值</td>\n</tr>\n<tr>\n<td>@DecimalMax(value=值)</td>\n<td style=\"text-align:center\">和@Min要求一样</td>\n<td style=\"text-align:right\">验证注解的元素值小于等于@ DecimalMax指定的value值</td>\n</tr>\n<tr>\n<td>@Digits(integer=整数位数, fraction=小数位数)</td>\n<td style=\"text-align:center\">和@Min要求一样</td>\n<td style=\"text-align:right\">验证注解的元素值的整数位数和小数位数上限</td>\n</tr>\n<tr>\n<td>@Size(min=下限, max=上限)</td>\n<td style=\"text-align:center\">字符串、Collection、Map、数组等</td>\n<td style=\"text-align:right\">验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td style=\"text-align:center\">java.util.Date,java.util.Calendar;Joda Time类库的日期类型</td>\n<td style=\"text-align:right\">验证注解的元素值（日期类型）比当前时间早</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td style=\"text-align:center\">与@Past要求一样</td>\n<td style=\"text-align:right\">验证注解的元素值（日期类型）比当前时间晚</td>\n</tr>\n<tr>\n<td>@NotBlank</td>\n<td style=\"text-align:center\">CharSequence子类型</td>\n<td style=\"text-align:right\">验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的首位空格</td>\n</tr>\n<tr>\n<td>@Length(min=下限, max=上限)</td>\n<td style=\"text-align:center\">CharSequence子类型</td>\n<td style=\"text-align:right\">验证注解的元素值长度在min和max区间内</td>\n</tr>\n<tr>\n<td>@NotEmpty</td>\n<td style=\"text-align:center\">CharSequence子类型、Collection、Map、数组</td>\n<td style=\"text-align:right\">验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td>\n</tr>\n<tr>\n<td>@Range(min=最小值, max=最大值)</td>\n<td style=\"text-align:center\">BigDecimal,BigInteger,CharSequence, byte, short, int, long等原子类型和包装类型</td>\n<td style=\"text-align:right\">验证注解的元素值在最小值和最大值之间</td>\n</tr>\n<tr>\n<td>@Email(regexp=正则表达式,flag=标志的模式)</td>\n<td style=\"text-align:center\">CharSequence子类型（如String）</td>\n<td style=\"text-align:right\">验证注解的元素值是Email，也可以通过regexp和flag指定自定义的email格式</td>\n</tr>\n<tr>\n<td>@Pattern(regexp=正则表达式,flag=标志的模式)</td>\n<td style=\"text-align:center\">String，任何CharSequence的子类型</td>\n<td style=\"text-align:right\">验证注解的元素值与指定的正则表达式匹配</td>\n</tr>\n<tr>\n<td>@Valid</td>\n<td style=\"text-align:center\">任何非原子类型</td>\n<td style=\"text-align:right\">指定递归验证关联的对象如用户对象中有个地址对象属性，如果想在验证用户对象时一起验证地址对象的话，在地址对象上加@Valid注解即可级联验证</td>\n</tr>\n</tbody>\n</table>\n<p>此处只列出Hibernate Validator提供的大部分验证约束注解，请参考hibernate validator官方文档了解其他验证约束注解和进行自定义的验证约束注解定义。</p>\n<h2>实战演练</h2>\n<ul>\n<li>@Validated 声明要检查的参数</li>\n</ul>\n<p>这里我们在控制器层进行注解声明</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n     * 走参数校验注解\n     *\n     * <span class=\"hljs-doctag\">@param</span> userDTO\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"/save/valid\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(@RequestBody @Validated UserDTO userDTO)</span> </span>{\n        userService.save(userDTO);\n        <span class=\"hljs-keyword\">return</span> RspDTO.success();\n    }\n\n</code></pre>\n<ul>\n<li>对参数的字段进行注解标注</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> org.hibernate.validator.constraints.Length;\n\n<span class=\"hljs-keyword\">import</span> javax.validation.constraints.*;\n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n<span class=\"hljs-keyword\">import</span> java.util.Date;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> LiJing\n * <span class=\"hljs-doctag\">@ClassName</span>: UserDTO\n * <span class=\"hljs-doctag\">@Description</span>: 用户传输对象\n * <span class=\"hljs-doctag\">@date</span> 2019/7/30 13:55\n */</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDTO</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\n\n    <span class=\"hljs-comment\">/*** 用户ID*/</span>\n    <span class=\"hljs-meta\">@NotNull</span>(message = <span class=\"hljs-string\">\"用户id不能为空\"</span>)\n    <span class=\"hljs-keyword\">private</span> Long userId;\n\n    <span class=\"hljs-comment\">/** 用户名*/</span>\n    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"用户名不能为空\"</span>)\n    <span class=\"hljs-meta\">@Length</span>(max = <span class=\"hljs-number\">20</span>, message = <span class=\"hljs-string\">\"用户名不能超过20个字符\"</span>)\n    <span class=\"hljs-meta\">@Pattern</span>(regexp = <span class=\"hljs-string\">\"^[\\\\u4E00-\\\\u9FA5A-Za-z0-9\\\\*]*$\"</span>, message = <span class=\"hljs-string\">\"用户昵称限制：最多20字符，包含文字、字母和数字\"</span>)\n    <span class=\"hljs-keyword\">private</span> String username;\n\n    <span class=\"hljs-comment\">/** 手机号*/</span>\n    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"手机号不能为空\"</span>)\n    <span class=\"hljs-meta\">@Pattern</span>(regexp = <span class=\"hljs-string\">\"^[1][3,4,5,6,7,8,9][0-9]{9}$\"</span>, message = <span class=\"hljs-string\">\"手机号格式有误\"</span>)\n    <span class=\"hljs-keyword\">private</span> String mobile;\n\n    <span class=\"hljs-comment\">/**性别*/</span>\n    <span class=\"hljs-keyword\">private</span> String sex;\n\n    <span class=\"hljs-comment\">/** 邮箱*/</span>\n    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"联系邮箱不能为空\"</span>)\n    <span class=\"hljs-meta\">@Email</span>(message = <span class=\"hljs-string\">\"邮箱格式不对\"</span>)\n    <span class=\"hljs-keyword\">private</span> String email;\n\n    <span class=\"hljs-comment\">/** 密码*/</span>\n    <span class=\"hljs-keyword\">private</span> String password;\n\n    <span class=\"hljs-comment\">/*** 创建时间 */</span>\n    <span class=\"hljs-meta\">@Future</span>(message = <span class=\"hljs-string\">\"时间必须是将来时间\"</span>)\n    <span class=\"hljs-keyword\">private</span> Date createTime;\n\n}\n\n</code></pre>\n<ul>\n<li>在全局校验中增加校验异常</li>\n</ul>\n<blockquote>\n<p>MethodArgumentNotValidException是springBoot中进行绑定参数校验时的异常,需要在springBoot中处理,其他需要 处理ConstraintViolationException异常进行处理.</p>\n</blockquote>\n<ul>\n<li>为了优雅一点,我们将参数异常,业务异常,统一做了一个全局异常,将控制层的异常包装到我们自定义的异常中</li>\n<li>为了优雅一点,我们还做了一个统一的结构体,将请求的code,和msg,data一起统一封装到结构体中,增加了代码的复用性</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> com.boot.lea.mybot.dto.RspDTO;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.dao.DuplicateKeyException;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.MethodArgumentNotValidException;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.NoHandlerFoundException;\n\n<span class=\"hljs-keyword\">import</span> javax.validation.ConstraintViolationException;\n<span class=\"hljs-keyword\">import</span> javax.validation.ValidationException;\n\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> LiJing\n * <span class=\"hljs-doctag\">@ClassName</span>: GlobalExceptionHandler\n * <span class=\"hljs-doctag\">@Description</span>: 全局异常处理器\n * <span class=\"hljs-doctag\">@date</span> 2019/7/30 13:57\n */</span>\n<span class=\"hljs-meta\">@RestControllerAdvice</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GlobalExceptionHandler</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Logger logger = LoggerFactory.getLogger(getClass());\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> DUPLICATE_KEY_CODE = <span class=\"hljs-number\">1001</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> PARAM_FAIL_CODE = <span class=\"hljs-number\">1002</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> VALIDATION_CODE = <span class=\"hljs-number\">1003</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 处理自定义异常\n     */</span>\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(BizException.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handleRRException</span><span class=\"hljs-params\">(BizException e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(e.getCode(), e.getMessage());\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 方法参数校验\n     */</span>\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(MethodArgumentNotValidException.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handleMethodArgumentNotValidException</span><span class=\"hljs-params\">(MethodArgumentNotValidException e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(PARAM_FAIL_CODE, e.getBindingResult().getFieldError().getDefaultMessage());\n    }\n\n    <span class=\"hljs-comment\">/**\n     * ValidationException\n     */</span>\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(ValidationException.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handleValidationException</span><span class=\"hljs-params\">(ValidationException e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(VALIDATION_CODE, e.getCause().getMessage());\n    }\n\n    <span class=\"hljs-comment\">/**\n     * ConstraintViolationException\n     */</span>\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(ConstraintViolationException.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handleConstraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(PARAM_FAIL_CODE, e.getMessage());\n    }\n\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(NoHandlerFoundException.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handlerNoFoundException</span><span class=\"hljs-params\">(Exception e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(<span class=\"hljs-number\">404</span>, <span class=\"hljs-string\">\"路径不存在，请检查路径是否正确\"</span>);\n    }\n\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(DuplicateKeyException.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handleDuplicateKeyException</span><span class=\"hljs-params\">(DuplicateKeyException e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(DUPLICATE_KEY_CODE, <span class=\"hljs-string\">\"数据重复，请检查后提交\"</span>);\n    }\n\n\n    <span class=\"hljs-meta\">@ExceptionHandler</span>(Exception.class)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">handleException</span><span class=\"hljs-params\">(Exception e)</span> </span>{\n        logger.error(e.getMessage(), e);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">\"系统繁忙,请稍后再试\"</span>);\n    }\n}\n\n</code></pre>\n<ul>\n<li>测试</li>\n</ul>\n<p>如下文:确实做到了参数校验时返回异常信息和对应的code,方便了我们不再繁琐的处理参数校验</p>\n<p><img src=\"../img/java-validatior-2.png\" alt=\"java-validatior\"></p>\n<h2>自定义参数注解</h2>\n<ul>\n<li>比如我们来个 自定义身份证校验 注解</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-meta\">@Target</span>({ElementType.PARAMETER, ElementType.FIELD})\n<span class=\"hljs-meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"hljs-meta\">@Constraint</span>(validatedBy = IdentityCardNumberValidator.class)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> IdentityCardNumber {\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">message</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> \"身份证号码不合法\"</span>;\n\n    Class&lt;?&gt;[] groups() <span class=\"hljs-keyword\">default</span> {};\n\n    Class&lt;? extends Payload&gt;[] payload() <span class=\"hljs-keyword\">default</span> {};\n}\n\n</code></pre>\n<p>这个注解是作用在Field字段上，运行时生效，触发的是IdentityCardNumber这个验证类。</p>\n<blockquote>\n<p>message 定制化的提示信息，主要是从ValidationMessages.properties里提取，也可以依据实际情况进行定制</p>\n</blockquote>\n<blockquote>\n<p>groups 这里主要进行将validator进行分类，不同的类group中会执行不同的validator操作</p>\n</blockquote>\n<blockquote>\n<p>payload 主要是针对bean的，使用不多。</p>\n</blockquote>\n<ul>\n<li>然后自定义Validator</li>\n</ul>\n<p>这个是真正进行验证的逻辑代码：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IdentityCardNumberValidator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ConstraintValidator</span>&lt;<span class=\"hljs-title\">IdentityCardNumber</span>, <span class=\"hljs-title\">Object</span>&gt; </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(IdentityCardNumber identityCardNumber)</span> </span>{\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(Object o, ConstraintValidatorContext constraintValidatorContext)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> IdCardValidatorUtils.isValidate18Idcard(o.toString());\n    }\n}\n\n</code></pre>\n<ul>\n<li>使用自定义的注解</li>\n</ul>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"身份证号不能为空\"</span>)\n    <span class=\"hljs-meta\">@IdentityCardNumber</span>(message = <span class=\"hljs-string\">\"身份证信息有误,请核对后提交\"</span>)\n    <span class=\"hljs-keyword\">private</span> String clientCardNo;\n</code></pre>\n<ul>\n<li>使用groups的校验</li>\n</ul>\n<p>有的宝宝说同一个对象要复用,比如UserDTO在更新时候要校验userId,在保存的时候不需要校验userId,在两种情况下都要校验username,那就用上groups了:</p>\n<blockquote>\n<p>先定义groups的分组接口Create和Update</p>\n</blockquote>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> javax.validation.groups.Default;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Create</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Default</span> </span>{\n}\n\n<span class=\"hljs-keyword\">import</span> javax.validation.groups.Default;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Update</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Default</span></span>{\n}\n\n</code></pre>\n<blockquote>\n<p>再在需要校验的地方@Validated声明校验组</p>\n</blockquote>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n     * 走参数校验注解的 groups 组合校验\n     *\n     * <span class=\"hljs-doctag\">@param</span> userDTO\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"/update/groups\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(@RequestBody @Validated(Update.class)</span> UserDTO userDTO) </span>{\n        userService.updateById(userDTO);\n        <span class=\"hljs-keyword\">return</span> RspDTO.success();\n    }\n\n</code></pre>\n<blockquote>\n<p>在DTO中的字段上定义好groups = {}的分组类型</p>\n</blockquote>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDTO</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\n\n    <span class=\"hljs-comment\">/*** 用户ID*/</span>\n    <span class=\"hljs-meta\">@NotNull</span>(message = <span class=\"hljs-string\">\"用户id不能为空\"</span>, groups = Update.class)\n    <span class=\"hljs-keyword\">private</span> Long userId;\n\n    <span class=\"hljs-comment\">/**\n     * 用户名\n     */</span>\n    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"用户名不能为空\"</span>)\n    <span class=\"hljs-meta\">@Length</span>(max = <span class=\"hljs-number\">20</span>, message = <span class=\"hljs-string\">\"用户名不能超过20个字符\"</span>, groups = {Create.class, Update.class})\n    <span class=\"hljs-meta\">@Pattern</span>(regexp = <span class=\"hljs-string\">\"^[\\\\u4E00-\\\\u9FA5A-Za-z0-9\\\\*]*$\"</span>, message = <span class=\"hljs-string\">\"用户昵称限制：最多20字符，包含文字、字母和数字\"</span>)\n    <span class=\"hljs-keyword\">private</span> String username;\n\n    <span class=\"hljs-comment\">/**\n     * 手机号\n     */</span>\n    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"手机号不能为空\"</span>)\n    <span class=\"hljs-meta\">@Pattern</span>(regexp = <span class=\"hljs-string\">\"^[1][3,4,5,6,7,8,9][0-9]{9}$\"</span>, message = <span class=\"hljs-string\">\"手机号格式有误\"</span>, groups = {Create.class, Update.class})\n    <span class=\"hljs-keyword\">private</span> String mobile;\n\n    <span class=\"hljs-comment\">/**\n     * 性别\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String sex;\n\n    <span class=\"hljs-comment\">/**\n     * 邮箱\n     */</span>\n    <span class=\"hljs-meta\">@NotBlank</span>(message = <span class=\"hljs-string\">\"联系邮箱不能为空\"</span>)\n    <span class=\"hljs-meta\">@Email</span>(message = <span class=\"hljs-string\">\"邮箱格式不对\"</span>)\n    <span class=\"hljs-keyword\">private</span> String email;\n\n    <span class=\"hljs-comment\">/**\n     * 密码\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String password;\n\n    <span class=\"hljs-comment\">/*** 创建时间 */</span>\n    <span class=\"hljs-meta\">@Future</span>(message = <span class=\"hljs-string\">\"时间必须是将来时间\"</span>, groups = {Create.class})\n    <span class=\"hljs-keyword\">private</span> Date createTime;\n\n}\n\n</code></pre>\n<p>注意:在声明分组的时候尽量加上 extend javax.validation.groups.Default否则,在你声明@Validated(Update.class)的时候,就会出现你在默认没添加groups = {}的时候的校验组@Email(message = &quot;邮箱格式不对&quot;),会不去校验,因为默认的校验组是groups = {Default.class}.</p>\n<ul>\n<li>restful风格用法</li>\n</ul>\n<blockquote>\n<p>在多个参数校验,或者@RequestParam 形式时候,需要在controller上加注@Validated</p>\n</blockquote>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"/get\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">(@RequestParam(<span class=\"hljs-string\">\"userId\"</span>)</span> @<span class=\"hljs-title\">NotNull</span><span class=\"hljs-params\">(message = <span class=\"hljs-string\">\"用户id不能为空\"</span>)</span> Long userId) </span>{\n    User user = userService.selectById(userId);\n    <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO&lt;User&gt;().nonAbsent(<span class=\"hljs-string\">\"用户不存在\"</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO&lt;User&gt;().success(user);\n}\n\n\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"user/\"</span>)\n<span class=\"hljs-meta\">@Validated</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractController</span> </span>{\n  <span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"/get\"</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RspDTO <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">(@RequestParam(<span class=\"hljs-string\">\"userId\"</span>)</span> @<span class=\"hljs-title\">NotNull</span><span class=\"hljs-params\">(message = <span class=\"hljs-string\">\"用户id不能为空\"</span>)</span> Long userId) </span>{\n    User user = userService.selectById(userId);\n    <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO&lt;User&gt;().nonAbsent(<span class=\"hljs-string\">\"用户不存在\"</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RspDTO&lt;User&gt;().success(user);\n  }\n}\n</code></pre>\n",
  "link": "\\en-us\\blog\\java\\java-validator.html",
  "meta": {}
}