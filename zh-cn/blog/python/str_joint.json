{
  "filename": "str_joint.md",
  "__html": "<h1>Python 拼接字符串的 7 种方式</h1>\n<h2>1、来自C语言的%方式</h2>\n<pre><code class=\"language-python\">print(<span class=\"hljs-string\">'%s %s'</span> % (<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'world'</span>))\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>Hello world\n</code></pre>\n<p>%号格式化字符串的方式继承自古老的C语言，这在很多编程语言都有类似的实现。上例的%s是一个占位符，它仅代表一段字符串，并不是拼接的实际内容。实际的拼接内容在一个单独的%号后面，放在一个元组里。</p>\n<p>类似的占位符还有：%d（代表一个整数）、%f（代表一个浮点数）、%x（代表一个16进制数），等等。%占位符既是这种拼接方式的特点，同时也是其限制，因为每种占位符都有特定意义，实际使用起来太麻烦了。</p>\n<h2>2、format()拼接方式</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># 简洁版</span>\ns1 = <span class=\"hljs-string\">'Hello {}! My name is {}.'</span>.format(<span class=\"hljs-string\">'World'</span>, <span class=\"hljs-string\">'Python猫'</span>)\nprint(s1)\n&gt;&gt;&gt;Hello World! My name <span class=\"hljs-keyword\">is</span> Python猫.\n\n<span class=\"hljs-comment\"># 对号入座版</span>\ns2 = <span class=\"hljs-string\">'Hello {0}! My name is {1}.'</span>.format(<span class=\"hljs-string\">'World'</span>, <span class=\"hljs-string\">'Python猫'</span>)\ns3 = <span class=\"hljs-string\">'Hello {name1}! My name is {name2}.'</span>.format(name1=<span class=\"hljs-string\">'World'</span>, name2=<span class=\"hljs-string\">'Python猫'</span>)\nprint(s2)\n&gt;&gt;&gt;Hello World! My name <span class=\"hljs-keyword\">is</span> Python猫.\nprint(s3)\n&gt;&gt;&gt;Hello World! My name <span class=\"hljs-keyword\">is</span> Python猫.\n</code></pre>\n<p>这种方式使用花括号{}做占位符，在format方法中再转入实际的拼接值。容易看出，它实际上是对%号拼接方式的改进。这种方式在Python2.6中开始引入。</p>\n<p>上例中，简洁版的花括号中无内容，缺点是容易弄错次序。对号入座版主要有两种，一种传入序列号，一种则使用key-value的方式。实战中，我们更推荐后一种，既不会数错次序，又更直观可读。</p>\n<h2>3、() 类似元组方式</h2>\n<pre><code class=\"language-python\">s_tuple = (<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">' '</span>, <span class=\"hljs-string\">'world'</span>)\ns_like_tuple = (<span class=\"hljs-string\">'Hello'</span> <span class=\"hljs-string\">' '</span> <span class=\"hljs-string\">'world'</span>)\n\nprint(s_tuple) \n&gt;&gt;&gt;(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">' '</span>, <span class=\"hljs-string\">'world'</span>)\nprint(s_like_tuple) \n&gt;&gt;&gt;Hello world\n\ntype(s_like_tuple) &gt;&gt;&gt;str\n</code></pre>\n<p>注意，上例中s_like_tuple并不是一个元组，因为元素间没有逗号分隔符，这些元素间可以用空格间隔，也可以不要空格。使用type()查看，发现它就是一个str类型。我没查到这是啥原因，猜测或许()括号中的内容是被Python优化处理了。</p>\n<p>这种方式看起来很快捷，但是，括号()内要求元素是真实字符串，不能混用变量，所以不够灵活。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># 多元素时，不支持有变量</span>\nstr_1 = <span class=\"hljs-string\">'Hello'</span>\nstr_2 = (str_1 <span class=\"hljs-string\">'world'</span>)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>SyntaxError: invalid syntax\nstr_3 = (str_1 str_1)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>SyntaxError: invalid syntax\n<span class=\"hljs-comment\"># 但是下面写法不会报错</span>\nstr_4 = (str_1)\n</code></pre>\n<p>说实话，我不喜欢这种实现方式。浓浓的一股被面向对象思想毒害的臭味。</p>\n<p>就不多说了。\n5、常用的+号方式</p>\n<pre><code class=\"language-python\">str_1 = <span class=\"hljs-string\">'Hello world！ '</span> \nstr_2 = <span class=\"hljs-string\">'My name is Python猫.'</span>\nprint(str_1 + str_2)\n&gt;&gt;&gt;Hello world！ My name <span class=\"hljs-keyword\">is</span> Python猫.\nprint(str_1)\n&gt;&gt;&gt;Hello world！ \n</code></pre>\n<p>这种方式最常用、直观、易懂，是入门级的实现方式。但是，它也存在两处让人容易犯错的地方。</p>\n<p>首先，新入门编程的同学容易犯错，他们不知道字符串是不可变类型，新的字符串会独占一块新的内存，而原来的字符串保持不变。上例中，拼接前有两段字符串，拼接后实际有三段字符串。</p>\n<p>其次，一些有经验的老程序员也容易犯错，他们以为当拼接次数不超过3时，使用+号连接符就会比其它方式快（ps：不少Python教程都是如此建议），但这没有任何合理根据。</p>\n<p>事实上，在拼接短的字面值时，由于CPython中的 常数折叠 （constant folding）功能，这些字面值会被转换成更短的形式，例如'a'+'b'+'c' 被转换成'abc'，'hello'+'world'也会被转换成'hello world'。这种转换是在编译期完成的，而到了运行期时就不会再发生任何拼接操作，因此会加快整体计算的速度。</p>\n<p>常数折叠优化有一个限度，它要求拼接结果的长度不超过20。所以，当拼接的最终字符串长度不超过20时，+号操作符的方式，会比后面提到的join等方式快得多，这与+号的使用次数无关。</p>\n<h2>6、join()拼接方式</h2>\n<pre><code class=\"language-python\">str_list = [<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'world'</span>]\nstr_join1 = <span class=\"hljs-string\">' '</span>.join(str_list)\nstr_join2 = <span class=\"hljs-string\">'-'</span>.join(str_list)\nprint(str_join1) &gt;&gt;&gt;Hello world\nprint(str_join2) &gt;&gt;&gt;Hello-world\n</code></pre>\n<p>str对象自带的join()方法，接受一个序列参数，可以实现拼接。拼接时，元素若不是字符串，需要先转换一下。可以看出，这种方法比较适用于连接序列对象中（例如列表）的元素，并设置统一的间隔符。</p>\n<p>当拼接长度超过20时，这种方式基本上是首选。不过，它的缺点就是，不适合进行零散片段的、不处于序列集合的元素拼接。</p>\n<h2>7、f-string方式</h2>\n<pre><code class=\"language-python\">name = <span class=\"hljs-string\">'world'</span>\nmyname = <span class=\"hljs-string\">'python_cat'</span>\nwords = <span class=\"hljs-string\">f'Hello <span class=\"hljs-subst\">{name}</span>. My name is <span class=\"hljs-subst\">{myname}</span>.'</span>\nprint(words)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>Hello world. My name <span class=\"hljs-keyword\">is</span> python_cat.\n</code></pre>\n<p>f-string方式出自PEP 498（Literal String Interpolation，字面字符串插值），从Python3.6版本引入。其特点是在字符串前加 f 标识，字符串中间则用花括号{}包裹其它字符串变量。</p>\n<p>这种方式在可读性上秒杀format()方式，处理长字符串的拼接时，速度与join()方法相当。</p>\n<p>尽管如此，这种方式与其它某些编程语言相比，还是欠优雅，因为它引入了一个 f 标识。而其它某些程序语言可以更简练，比如shell：</p>\n<pre><code class=\"language-shell\">name=\"world\"\nmyname=\"python_cat\"\nwords=\"Hello ${name}. My name is ${myname}.\"\necho $words\n<span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;Hello world. My name is python_cat.</span>\n</code></pre>\n<p>总结一下，我们前面说的“字符串拼接”，其实是从结果上理解。若从实现原理上划分的话，我们可以将这些方法划分出三种类型：\n格式化类：%、format()、template\n拼接类：+、()、join()\n插值类：f-string\n当要处理字符串列表等序列结构时，采用join()方式；拼接长度不超过20时，选用+号操作符方式；长度超过20的情况，高版本选用f-string，低版本时看情况使用format()或join()方式。</p>\n",
  "link": "\\zh-cn\\blog\\python\\str_joint.html",
  "meta": {}
}