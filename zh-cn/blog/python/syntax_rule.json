{
  "filename": "syntax_rule.md",
  "__html": "<h1>Python 语法技巧</h1>\n<p>Python 开发中有哪些高级技巧？这是知乎上一个问题，我总结了一些常见的技巧在这里，可能谈不上多高级，但掌握这些至少可以让你的代码看起来 Pythonic 一点。如果你还在按照类C语言的那套风格来写的话，在 code review 恐怕会要被吐槽了。</p>\n<h2>列表推导式</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>chars = [ c <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">'python'</span> ]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>chars\n[<span class=\"hljs-string\">'p'</span>, <span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'t'</span>, <span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'n'</span>]\n</code></pre>\n<h2>字典推导式</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>dict1 = {<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'c'</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'d'</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">'e'</span>: <span class=\"hljs-number\">5</span>}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>double_dict1 = {k:v*<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> (k,v) <span class=\"hljs-keyword\">in</span> dict1.items()}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>double_dict1\n{<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">'c'</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">'d'</span>: <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">'e'</span>: <span class=\"hljs-number\">10</span>}\n</code></pre>\n<h2>集合推导式</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>set1 = {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>double_set = {i*<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> set1}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>double_set\n{<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>}\n</code></pre>\n<h2>合并字典</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>x = {<span class=\"hljs-string\">'a'</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'b'</span>:<span class=\"hljs-number\">2</span>}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>y = {<span class=\"hljs-string\">'c'</span>:<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'d'</span>:<span class=\"hljs-number\">4</span>}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>z = {**x, **y}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>z\n{<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'c'</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'d'</span>: <span class=\"hljs-number\">4</span>}\n</code></pre>\n<h2>复制列表</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>nums = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>nums[::]\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>copy_nums = nums[::]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>copy_nums\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</code></pre>\n<h2>反转列表</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>reverse_nums = nums[::<span class=\"hljs-number\">-1</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>reverse_nums\n[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n</code></pre>\n<p>PACKING / UNPACKING</p>\n<h2>变量交换</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a,b = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a ,b = b,a\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>b\n<span class=\"hljs-number\">1</span>\n</code></pre>\n<h2>高级拆包</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a, *b = <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>b\n[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a, *b, c = <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>b\n[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>c\n<span class=\"hljs-number\">5</span>\n</code></pre>\n<h2>函数返回多个值（其实是自动packing成元组）然后unpacking赋值给4个变量</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a, b, c, d = f()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>d\n<span class=\"hljs-number\">4</span>\n</code></pre>\n<h2>列表合并成字符串</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">\" \"</span>.join([<span class=\"hljs-string\">\"I\"</span>, <span class=\"hljs-string\">\"Love\"</span>, <span class=\"hljs-string\">\"Python\"</span>])\n<span class=\"hljs-string\">'I Love Python'</span>\n</code></pre>\n<h2>链式比较</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">if</span> a &gt; <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> a &lt; <span class=\"hljs-number\">5</span>:\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">pass</span>\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">2</span>&lt;a&lt;<span class=\"hljs-number\">5</span>:\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n<h2>yield from</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># 没有使用 field from</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dup</span><span class=\"hljs-params\">(n)</span>:</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n        <span class=\"hljs-keyword\">yield</span> i\n        <span class=\"hljs-keyword\">yield</span> i\n\n<span class=\"hljs-comment\"># 使用yield from</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dup</span><span class=\"hljs-params\">(n)</span>:</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> [i, i]\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> dup(<span class=\"hljs-number\">3</span>):\n    print(i)\n\n&gt;&gt;&gt;\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">2</span>\n</code></pre>\n<h2>in 代替 or</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> x == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> x == <span class=\"hljs-number\">3</span>:\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">pass</span>\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">if</span> x <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>):\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n<h2>字典代替多个if else</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-string\">'a'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">elif</span> x == <span class=\"hljs-string\">'b'</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"a\"</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span>: <span class=\"hljs-number\">2</span>}.get(x)\n</code></pre>\n<h2>有下标索引的枚举</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i, e <span class=\"hljs-keyword\">in</span> enumerate([<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"b\"</span>,<span class=\"hljs-string\">\"c\"</span>]):\n<span class=\"hljs-meta\">... </span>    print(i, e)\n...\n<span class=\"hljs-number\">0</span> a\n<span class=\"hljs-number\">1</span> b\n<span class=\"hljs-number\">2</span> c\n</code></pre>\n<h2>生成器</h2>\n<p>注意区分列表推导式，生成器效率更高</p>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>g = (i**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>))\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>g\n&lt;generator object &lt;genexpr&gt; at <span class=\"hljs-number\">0x10881e518</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> g:\n<span class=\"hljs-meta\">... </span>    print(i)\n...\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">9</span>\n<span class=\"hljs-number\">16</span>\n</code></pre>\n<h2>默认字典 defaultdict</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>d = dict()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>d[<span class=\"hljs-string\">'nums'</span>]\nKeyError: <span class=\"hljs-string\">'nums'</span>\n&gt;&gt;&gt;\n\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> defaultdict\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>d = defaultdict(list)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>d[<span class=\"hljs-string\">\"nums\"</span>]\n[]\n</code></pre>\n<h2>字符串格式化</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>lang = <span class=\"hljs-string\">'python'</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">f'<span class=\"hljs-subst\">{lang}</span> is most popular language in the world'</span>\n<span class=\"hljs-string\">'python is most popular language in the world'</span>\n</code></pre>\n<h2>列表中出现次数最多的元素</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>nums = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>max(set(nums), key=nums.count)\n<span class=\"hljs-number\">3</span>\n\n或者\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>Counter(nums).most_common()[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-number\">3</span>\n</code></pre>\n<h2>读写文件</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">\"test.txt\"</span>, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:\n<span class=\"hljs-meta\">... </span>    f.writelines(<span class=\"hljs-string\">\"hello\"</span>)\n</code></pre>\n<h2>判断对象类型，可指定多个类型</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>isinstance(a, (int, str))\n<span class=\"hljs-literal\">True</span>\n</code></pre>\n<h2>类似的还有字符串的 startswith，endswith</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">\"http://foofish.net\"</span>.startswith((<span class=\"hljs-string\">'http'</span>,<span class=\"hljs-string\">'https'</span>))\n<span class=\"hljs-literal\">True</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">\"https://foofish.net\"</span>.startswith((<span class=\"hljs-string\">'http'</span>,<span class=\"hljs-string\">'https'</span>))\n<span class=\"hljs-literal\">True</span>\n</code></pre>\n<h2><strong>str</strong> 与 <strong>repr</strong> 区别</h2>\n<pre><code class=\"language-python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>str(datetime.now())\n<span class=\"hljs-string\">'2018-11-20 00:31:54.839605'</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>repr(datetime.now())\n<span class=\"hljs-string\">'datetime.datetime(2018, 11, 20, 0, 32, 0, 579521)'</span>\n</code></pre>\n<p>前者对人友好，可读性更强，后者对计算机友好，支持 obj == eval(repr(obj))</p>\n<h2>使用装饰器</h2>\n<pre><code class=\"language-python\">def makebold(f):\nreturn lambda: \"&lt;b&gt;\" + f() + \"&lt;/b&gt;\"\n\ndef makeitalic(f):\nreturn lambda: \"&lt;i&gt;\" + f() + \"&lt;/i&gt;\"\n\n@makebold\n@makeitalic\ndef say():\nreturn \"Hello\"\n\n&gt;&gt;&gt; say()\n&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n<h2>不使用装饰器，可读性非常差</h2>\n<pre><code class=\"language-python\">def say():\nreturn \"Hello\"\n&gt;&gt;&gt; makebold(makeitalic(say))()\n&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n",
  "link": "\\zh-cn\\blog\\python\\syntax_rule.html",
  "meta": {}
}