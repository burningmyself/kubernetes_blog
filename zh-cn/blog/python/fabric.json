{
  "filename": "fabric.md",
  "__html": "<h1>远程部署神器 Fabric，支持 Python3</h1>\n<p>如果你搜一圈 “Fabric “关键字，你会发现 90% 的资料都是过时的，因为现在 Fabric 支持 Python3，但是它又不兼容旧版 Fabric。所以，如果你按照那些教程去操作的话根本跑不通。</p>\n<p>如果你还没用过 Fabric，那么这篇文章就是帮你快速上手 Fabric 的。不管你现在用不用，先了解了以后也用得着。</p>\n<p>平时我们的开发流程是这样，经过几个月奋战，项目终于开发完了，测试也没问题了，我们就把代码提交到 GitHub 那样的托管平台，准备部署到正式环境。你小心翼翼地登录到正式服务器，进入到项目目录中，把代码从远程仓库拉下来，然后启动程序。后面每次有新功能发布或者哪怕只是修改了一个小小的 Bug 时，你都要执行重复的操作，登录服务器，切换到指定目录，拉取代码，重启服务。</p>\n<p>其实这种操作非常繁琐，也没什么技术含量，还容易出问题，于是 Fabric 出场了。Fabric 是一个远程部署神器，它可以在本地执行远程服务器的命令。</p>\n<p>怎么做？很简单，就几个步骤。</p>\n<h3>安装 Fabric</h3>\n<pre><code>pip install fabric --upgrade\n</code></pre>\n<p>注意，如果你安装的是旧版的 Fabric，那么新版的 Fabric 是不兼容旧版的，目前 Fabric 有三个版本，Fabric1 就是以前的 Fabric，只支持 Python2，已不推荐使用，而 Fabric2 就是现在的 Fabric，同时支持 Python2 和 Python3， 也是官方强烈推荐的版本， 还有一个 Fabric3，这是网友从旧版的 Fabric1 克隆过来的非官方版本，但是兼容 Fabric1，也支持 Python2 和 Python3。</p>\n<p>最新的 Fabric 不需要 <a href=\"http://fabfile.py\">fabfile.py</a> 文件， 也不需要 fab 命令，而现在网络上几乎所有的教程、资料都还是基于 fabric1 写的，当你在看那些教程的时候，注意甄别。  而新版 Fabric 提供的 API 非常简单。</p>\n<h3>运行命令</h3>\n<p>先看个例子，下面是一段部署脚本</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># deploy.py</span>\n<span class=\"hljs-comment\"># 1.  创建一个远程连接</span>\n<span class=\"hljs-comment\"># 2. 进入指定目录</span>\n<span class=\"hljs-comment\"># 3. 在指定目录下面执行重启命令</span>\n\n<span class=\"hljs-keyword\">from</span> fabric <span class=\"hljs-keyword\">import</span> Connection\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># ip 我是随便填的</span>\n    <span class=\"hljs-comment\"># 如果你的电脑配了ssh免密码登录，就不需要 connect_kwargs 来指定密码了。</span>\n    c = Connection(<span class=\"hljs-string\">\"root@232.231.231.22\"</span>, connect_kwargs={<span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"youpassword\"</span>})\n\n    <span class=\"hljs-keyword\">with</span> c.cd(<span class=\"hljs-string\">'/var/www/youproject'</span>):\n        c.run(<span class=\"hljs-string\">\"git pull origin master\"</span>)\n        c.run(<span class=\"hljs-string\">\"/usr/bin/supervisorctl -c ../supervisor/supervisord.conf restart youproject\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n<p>执行</p>\n<pre><code>python deploy.py\n</code></pre>\n<p>执行完成后，最新代码就已经部署到正式环境并重启了服务，是不是非常方便，妈妈再也不要担心我在正式环境敲错命令删数据库跑路了。</p>\n<p>Fabric 不仅支持 Linux，而且在 Windows 平台也能很好的运行，在中小型项目，它是非常不错的运维工具，有了 Frabic ，管理上百台服务器都不成问题。</p>\n<h3>构建连接</h3>\n<pre><code class=\"language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Connection</span><span class=\"hljs-params\">(Context)</span>:</span>\n    host = <span class=\"hljs-literal\">None</span>\n    user = <span class=\"hljs-literal\">None</span>\n    port = <span class=\"hljs-literal\">None</span>\n    ssh_config = <span class=\"hljs-literal\">None</span>\n    connect_timeout = <span class=\"hljs-literal\">None</span>\n    connect_kwargs = <span class=\"hljs-literal\">None</span>\n    ...\n</code></pre>\n<p>构建 Connection 对象的方式有不同的方式，例如你可以将 host 写成 “root@192.168.101.1:22” ，也可以作为3个参数分开写。而 connect_kwargs 是字典对象，通常填服务器的登录密码或者密钥。</p>\n<h3>上传文件</h3>\n<p>run 方法用于执行命令，cd 进入指定目录，put 方法用于上传文件， 例如：</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> fabric <span class=\"hljs-keyword\">import</span> Connection\nc = Connection(<span class=\"hljs-string\">'web1'</span>)\nc.put(<span class=\"hljs-string\">'myfiles.tgz'</span>, <span class=\"hljs-string\">'/opt/mydata'</span>)\nc.run(<span class=\"hljs-string\">'tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz'</span>)\n</code></pre>\n<h3>多台服务器</h3>\n<p>如果是要在多台服务器运行命令，简单的办法就是使用迭代，挨个服务器执行命令：</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># web1,web2,mac1 都是服务器的名字，你也可以用ip代替</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> fabric <span class=\"hljs-keyword\">import</span> Connection\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> host <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">'web1'</span>, <span class=\"hljs-string\">'web2'</span>, <span class=\"hljs-string\">'mac1'</span>):\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>    result = Connection(host).run(<span class=\"hljs-string\">'uname -s'</span>)\n<span class=\"hljs-meta\">... </span>    print(<span class=\"hljs-string\">\"{}: {}\"</span>.format(host, result.stdout.strip()))\n...\nweb1: Linux\nweb2: Linux\nmac1: Darwin\n</code></pre>\n<p>或者使用 SerialGroup</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> fabric <span class=\"hljs-keyword\">import</span> SerialGroup <span class=\"hljs-keyword\">as</span> Group\npool = Group(<span class=\"hljs-string\">'web1'</span>, <span class=\"hljs-string\">'web2'</span>, <span class=\"hljs-string\">'web3'</span>, connect_kwargs={<span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"youpassword\"</span>} )\npool.put(<span class=\"hljs-string\">'myfiles.tgz'</span>, <span class=\"hljs-string\">'/opt/mydata'</span>)\npool.run(<span class=\"hljs-string\">'tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz'</span>)\n</code></pre>\n<p>Group(*hosts, **kwargs) 参数说明：</p>\n<p>*hosts: 可以传入多个主机名或IP\n**kwargs 接收的参数可以和Connection一样，可以指定密码</p>\n<p>本文完，你 get 了吗？<br>\n<a href=\"https://www.fabfile.org/\">更多参考请点击：</a><a href=\"https://www.fabfile.org/\">https://www.fabfile.org/</a></p>\n",
  "link": "\\zh-cn\\blog\\python\\fabric.html",
  "meta": {}
}