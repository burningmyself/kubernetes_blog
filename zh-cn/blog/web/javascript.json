{
  "filename": "javascript.md",
  "__html": "<h1>JavaScript 基础</h1>\n<nav>\n<a href=\"#一概念简介\">一、概念简介</a><br/>\n<a href=\"#二基本类型\">二、基本类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#21-数值类型\">2.1 数值类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#22-字符类型\">2.2 字符类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#23-基本类型检测\">2.3 基本类型检测</a><br/>\n<a href=\"#三引用类型\">三、引用类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#31-Object-类型\">3.1 Object 类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#32-Array-类型\">3.2 Array 类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#33-Date-类型\">3.3 Date 类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#34-Funcation-类型\">3.4 Funcation 类型</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#35-引用类型检测\">3.5 引用类型检测</a><br/>\n<a href=\"#四内置对象\">四、内置对象</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#41-Global-对象\">4.1 Global 对象</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#42--window-对象\">4.2  window 对象</a><br/>\n<a href=\"#五作用域与闭包\">五、作用域与闭包</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#51--作用域\">5.1  作用域</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#52-作用域链\">5.2 作用域链</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#53-闭包\">5.3 闭包</a><br/>\n<a href=\"#六对象设计\">六、对象设计</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#61-数据属性\"> 6.1 数据属性</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#62-访问器属性\">6.2 访问器属性</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#63--读取属性\">6.3  读取属性</a><br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#64-创建对象\">6.4 创建对象</a><br/>\n</nav>\n<h2>一、概念简介</h2>\n<p>JavaScript 是一种专为与网页交互而设计的脚本语言，由以下三个部分组成：</p>\n<ul>\n<li><strong>ECMAScript</strong>：由 ECMA-262 定义，提供核心语言功能；</li>\n<li><strong>文档对象模型 (DOM)</strong>：提供访问和操作网页内容的方法和接口；</li>\n<li><strong>浏览器对象模型 (BOM)</strong>：提供与浏览器交互的方法和接口。</li>\n</ul>\n<p>ECMAScript  提供了语言的核心功能，它定义了以下七种数据类型：</p>\n<ul>\n<li><strong>六种基本数据类型</strong>：<code>Undefined</code>，<code>Null</code>，<code>Boolean</code>，<code>Number</code>，<code>String</code>，<code>Symbol</code> ( ES 6新增 )；</li>\n<li><strong>一种引用数据类型</strong>：统称为 Object 类型；具体又细分为 <code>Object</code>，<code>Array</code>，<code>Date</code>，<code>RegExp</code>，<code>Function</code> 等类型。另外和 Java 语言类似，对于布尔，数值，字符串等基本类型，分别存在其对应的包装类型 Boolean，Number，String，但通常我们并不会使用到这些包装类型，只需要使用其基本类型即可。</li>\n</ul>\n<h2>二、基本类型</h2>\n<h3>2.1 数值类型</h3>\n<p><strong>1. 进制数值</strong></p>\n<p>ECMAScript 中的 Number 支持以下三种常用进制：</p>\n<ul>\n<li><strong>十进制</strong>：正常数值就是十进制；</li>\n<li><strong>八进制</strong>：八进制字面值的第一位必须是零（0），然后是八进制数字序列（0～7）；</li>\n<li><strong>十六进制</strong>：十六进制字面值的前两位必须是 0x，后跟任意的十六进制数字（0～9 及 A～F）。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">56</span>);     <span class=\"hljs-comment\">// 56</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">070</span>);    <span class=\"hljs-comment\">// 56</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">0x38</span>);   <span class=\"hljs-comment\">// 56</span>\n</code></pre>\n<p><strong>2. 浮点数值</strong></p>\n<p>ECMAScript 的数值类型同样支持浮点数，但是由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会尽量将浮点数值转换为整数值存储：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10.0</span>;\n<span class=\"hljs-built_in\">console</span>.log(a);     <span class=\"hljs-comment\">// 10</span>\n</code></pre>\n<p>和其他语言类似，浮点数中的数值也是不精准的，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">0.1</span>; <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">0.2</span>;\n\na + b ;        <span class=\"hljs-comment\">// 0.30000000000000004</span>\na+b === <span class=\"hljs-number\">0.3</span> ;  <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>如果想要对浮点数进行精确计算，可以使用 <a href=\"https://github.com/MikeMcl/decimal.js\">decimal.js</a> ，<a href=\"https://github.com/josdejong/mathjs\"> math.js</a> 等第三方库。</p>\n<p><strong>3. 科学计数法</strong></p>\n<p>ECMAScript 支持使用科学计数法来表达数值：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-number\">8e-2</span>   <span class=\"hljs-comment\">// 0.08</span>\n<span class=\"hljs-number\">8e2</span>    <span class=\"hljs-comment\">// 800</span>\n</code></pre>\n<p><strong>4. parseInt() \\ parseFloat()</strong></p>\n<p>parseInt 可以用于解析字符串并返回整数，parseFloat 用于解析字符串并返回浮点数：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"56\"</span>);         <span class=\"hljs-comment\">// 56</span>\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"0x38\"</span>, <span class=\"hljs-number\">16</span>);   <span class=\"hljs-comment\">// 56   支持使用第二个参数来表示转换的进制</span>\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"56.6\"</span>);       <span class=\"hljs-comment\">// 56</span>\n\n<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">\"12.2\"</span>);     <span class=\"hljs-comment\">// 12.2 </span>\n\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"blue\"</span>);       <span class=\"hljs-comment\">// NaN  NaN用于表示一个本来要返回数值的操作却未返回数值的情况</span>\n</code></pre>\n<p><strong>5. toFixed()</strong></p>\n<p>toFixed 用于保留指定位数的小数，但需要注意的是其四舍五入的行为是不确定的：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-number\">1.35</span>.toFixed(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 1.4 正确</span>\n<span class=\"hljs-number\">1.335</span>.toFixed(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 1.33 错误</span>\n<span class=\"hljs-number\">1.3335</span>.toFixed(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 1.333 错误</span>\n<span class=\"hljs-number\">1.33335</span>.toFixed(<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// 1.3334 正确</span>\n<span class=\"hljs-number\">1.333335</span>.toFixed(<span class=\"hljs-number\">5</span>)  <span class=\"hljs-comment\">// 1.33333 错误</span>\n<span class=\"hljs-number\">1.3333335</span>.toFixed(<span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// 1.333333 错误</span>\n</code></pre>\n<p>想要解决这个问题，需要重写 toFixed 方法并通过判断最后一位是否大于或等于5来决定是否需要进位，具体代码如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// toFixed兼容方法</span>\n<span class=\"hljs-built_in\">Number</span>.prototype.toFixed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">len</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(len&gt;<span class=\"hljs-number\">20</span> || len&lt;<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RangeError</span>(<span class=\"hljs-string\">'toFixed() digits argument must be between 0 and 20'</span>);\n    }\n    <span class=\"hljs-comment\">// .123转为0.123</span>\n    <span class=\"hljs-keyword\">var</span> number = <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(number) || number &gt;= <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">21</span>)) {\n        <span class=\"hljs-keyword\">return</span> number.toString();\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> (len) == <span class=\"hljs-string\">'undefined'</span> || len == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">Math</span>.round(number)).toString();\n    }\n    <span class=\"hljs-keyword\">var</span> result = number.toString(),\n        numberArr = result.split(<span class=\"hljs-string\">'.'</span>);\n\n    <span class=\"hljs-keyword\">if</span>(numberArr.length&lt;<span class=\"hljs-number\">2</span>){\n        <span class=\"hljs-comment\">//整数的情况</span>\n        <span class=\"hljs-keyword\">return</span> padNum(result);\n    }\n    <span class=\"hljs-keyword\">var</span> intNum = numberArr[<span class=\"hljs-number\">0</span>], <span class=\"hljs-comment\">//整数部分</span>\n        deciNum = numberArr[<span class=\"hljs-number\">1</span>],<span class=\"hljs-comment\">//小数部分</span>\n        lastNum = deciNum.substr(len, <span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//最后一个数字</span>\n    \n    <span class=\"hljs-keyword\">if</span>(deciNum.length == len){\n        <span class=\"hljs-comment\">//需要截取的长度等于当前长度</span>\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n    <span class=\"hljs-keyword\">if</span>(deciNum.length &lt; len){\n        <span class=\"hljs-comment\">//需要截取的长度大于当前长度 1.3.toFixed(2)</span>\n        <span class=\"hljs-keyword\">return</span> padNum(result)\n    }\n    <span class=\"hljs-comment\">//需要截取的长度小于当前长度，需要判断最后一位数字</span>\n    result = intNum + <span class=\"hljs-string\">'.'</span> + deciNum.substr(<span class=\"hljs-number\">0</span>, len);\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">parseInt</span>(lastNum, <span class=\"hljs-number\">10</span>)&gt;=<span class=\"hljs-number\">5</span>){\n        <span class=\"hljs-comment\">//最后一位数字大于5，要进位</span>\n        <span class=\"hljs-keyword\">var</span> times = <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">10</span>, len); <span class=\"hljs-comment\">//需要放大的倍数</span>\n        <span class=\"hljs-keyword\">var</span> changedInt = <span class=\"hljs-built_in\">Number</span>(result.replace(<span class=\"hljs-string\">'.'</span>,<span class=\"hljs-string\">''</span>));<span class=\"hljs-comment\">//截取后转为整数</span>\n        changedInt++;<span class=\"hljs-comment\">//整数进位</span>\n        changedInt /= times;<span class=\"hljs-comment\">//整数转为小数，注：有可能还是整数</span>\n        result = padNum(changedInt+<span class=\"hljs-string\">''</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> result;\n    <span class=\"hljs-comment\">//对数字末尾加0</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">padNum</span>(<span class=\"hljs-params\">num</span>)</span>{\n        <span class=\"hljs-keyword\">var</span> dotPos = num.indexOf(<span class=\"hljs-string\">'.'</span>);\n        <span class=\"hljs-keyword\">if</span>(dotPos === <span class=\"hljs-number\">-1</span>){\n            <span class=\"hljs-comment\">//整数的情况</span>\n            num += <span class=\"hljs-string\">'.'</span>;\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;len;i++){\n                num += <span class=\"hljs-string\">'0'</span>;\n            }\n            <span class=\"hljs-keyword\">return</span> num;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">//小数的情况</span>\n            <span class=\"hljs-keyword\">var</span> need = len - (num.length - dotPos - <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>;j&lt;need;j++){\n                num += <span class=\"hljs-string\">'0'</span>;\n            }\n            <span class=\"hljs-keyword\">return</span> num;\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>参考自：<a href=\"http://caibaojian.com/js-tofixed.html\"><em>js中小数四舍五入和浮点数的研究</em></a></p>\n</blockquote>\n<h3>2.2 字符类型</h3>\n<p><strong>1. 字符串表示</strong></p>\n<p>ECMAScript 支持使用双引号 <code>&quot;</code> 或单引号 <code>'</code> 来表示字符串，并且 ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> lang = <span class=\"hljs-string\">\"Java\"</span>;\n<span class=\"hljs-comment\">/*程序会创建一个能容纳 10 个字符的新字符串用于填充\"Java\"和\"Script\"，之后再销毁原有的字符串\"Java\"和\"Script\"*/</span>\nlang = lang + <span class=\"hljs-string\">\"Script\"</span>;\n</code></pre>\n<p><strong>2. 转换为字符串</strong></p>\n<p>要把一个值转换为一个字符串有两种方式：</p>\n<ul>\n<li>使用对象方法 <strong>toString()</strong> ：大多数对象都具有这个方法，但需要注意的是 null 和 undefined 没有；</li>\n<li>使用转型函数 <strong>String()</strong> ：使用该转型函数时，如果传入的值有 toString() 方法，则调用该方法并返回相应的结果；如果传入的值是 null，则返回 &quot;null&quot; ；如果传入值是 undefined，则返回 &quot;undefined&quot; 。 示例如下：</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-literal\">null</span>;\na.toString()    <span class=\"hljs-comment\">// Uncaught TypeError: Cannot read property 'toString' of null</span>\n<span class=\"hljs-built_in\">String</span>(a)       <span class=\"hljs-comment\">// \"null\"</span>\n</code></pre>\n<p><strong>3. 常用的字符串操作</strong></p>\n<ul>\n<li><strong>concat()</strong> ：用于拼接一个或多个字符串；</li>\n<li><strong>slice()</strong> ：用于截取字符串，接收两个参数，分别代表截取的开始位置和结束位置；</li>\n<li><strong>substring()</strong>：用于截取字符串，接收两个参数，分别代表截取的开始位置和结束位置；</li>\n<li><strong>substr()</strong> ：用于截取字符串，接收两个参数，分别代表截取的开始位置和截取的长度；</li>\n<li><strong>indexOf() \\ lastIndexOf()</strong> ：均接收两个参数，分别代表待查找的字符串和查找的开始位置；</li>\n<li><strong>trim()</strong> ：用于去除字符串前后的空格。</li>\n</ul>\n<p>slice，substring，substr 等方法在传入正数参数时，其行为比较好预期，但传递参数是负数时，则具体的行为表现如下:</p>\n<ul>\n<li><strong>slice()</strong> ：会将传入的负值与字符串的长度相加；</li>\n<li><strong>substring()</strong> ：方法会把所有负值参数都转换为 0 ；</li>\n<li><strong>substr()</strong> ：会将第一个负值参数加上字符串的长度，如果传递了第二个参数且为负数时候，会将其转换为 0 。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> stringValue = <span class=\"hljs-string\">\"hello world\"</span>;\n\n<span class=\"hljs-comment\">// 只接收一个参数时</span>\nalert(stringValue.slice(<span class=\"hljs-number\">3</span>));              <span class=\"hljs-comment\">// \"lo world\"</span>\nalert(stringValue.substring(<span class=\"hljs-number\">3</span>));          <span class=\"hljs-comment\">// \"lo world\"</span>\nalert(stringValue.substr(<span class=\"hljs-number\">3</span>));             <span class=\"hljs-comment\">// \"lo world\"</span>\n\n<span class=\"hljs-comment\">// 接收两个参数时候</span>\nalert(stringValue.slice(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>));            <span class=\"hljs-comment\">// \"lo w\"</span>\nalert(stringValue.substring(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>));         <span class=\"hljs-comment\">// \"lo w\"</span>\nalert(stringValue.substr(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>));           <span class=\"hljs-comment\">// \"lo worl\"</span>\n\n<span class=\"hljs-comment\">// 当第一个参数为负值时</span>\nalert(stringValue.slice(<span class=\"hljs-number\">-3</span>));              <span class=\"hljs-comment\">// \"rld\"          按照规则等价于： slice(8)</span>\nalert(stringValue.substring(<span class=\"hljs-number\">-3</span>));          <span class=\"hljs-comment\">// \"hello world\"  按照规则等价于： substring(0)</span>\nalert(stringValue.substr(<span class=\"hljs-number\">-3</span>));             <span class=\"hljs-comment\">// \"rld\"          按照规则等价于： substr(8)</span>\n\n<span class=\"hljs-comment\">// 当第二个参数为负值时</span>\nalert(stringValue.slice(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-4</span>));           <span class=\"hljs-comment\">// \"lo w\"         按照规则等价于： slice(3,7)</span>\nalert(stringValue.substring(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-4</span>));       <span class=\"hljs-comment\">// \"hel\"          按照规则等价于： substring(3,0)</span>\nalert(stringValue.substr(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-4</span>));          <span class=\"hljs-comment\">// \"\"（空字符串）  按照规则等价于： substr(3,0)</span>\n</code></pre>\n<h3>2.3 基本类型检测</h3>\n<p>JavaScript 是一种弱类型的语言，在声明变量时候可以不必指明其具体类型，而是由程序进行推断。如果想要知道变量具体属于哪一个基础类型，可以使用 <strong>typeof</strong> 关键字，它的返回情况如下：</p>\n<ul>\n<li><strong>undefined</strong>：如果对应的值未定义；</li>\n<li><strong>boolean</strong>：如果对应的值是布尔值；</li>\n<li><strong>string</strong>：如果对应的值是字符串；</li>\n<li><strong>number</strong>：如果对应的值是数值；</li>\n<li><strong>object</strong>：如果对应的值是对象或 null；</li>\n<li><strong>function</strong>：如果对应的值是函数则返回 function。 函数在本质上也是对象，但是由于其一等公民的特殊地位，所以将其和其他普通对象进行区分是很有必要的，因此 typeof 对其检测时会返回 function ，而不是 object 。</li>\n</ul>\n<h2>三、引用类型</h2>\n<h3>3.1 Object 类型</h3>\n<p>创建 Object 实例有以下两种方式：</p>\n<ul>\n<li>使用 new 操作符后跟着 Object 构造函数；</li>\n<li>使用对象字面量的方式。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 1. 使用new操作符</span>\n<span class=\"hljs-keyword\">var</span> user  = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\nuser.name = <span class=\"hljs-string\">\"heibaiying\"</span>;\nuser.age = <span class=\"hljs-number\">30</span>;\n\n<span class=\"hljs-comment\">// 2. 使用对象字面量</span>\n<span class=\"hljs-keyword\">var</span> user = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"heibaiying\"</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n};\n</code></pre>\n<h3>3.2 Array 类型</h3>\n<p>创建数组也有两种方式，基于构造函数的方式和基于对象字面量的方式：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 1.基于构造函数的方式</span>\n<span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n<span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">20</span>);\n<span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>);\n\n<span class=\"hljs-comment\">// 2.基于对象字面量的方式</span>\n<span class=\"hljs-keyword\">var</span> names = [];\n<span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>];\n</code></pre>\n<p>数组的长度保存在其 length 属性中，和其他语言中的 length  属性不同，这个值是不是只读的，可以用其进行数组的截断操作或添加新的数据项，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>]; \n\ncolors.length = <span class=\"hljs-number\">2</span>;                  <span class=\"hljs-comment\">// [\"red\", \"blue\"]</span>\ncolors[colors.length] = <span class=\"hljs-string\">\"green\"</span>;    <span class=\"hljs-comment\">// [\"red\", \"blue\", \"green\"]</span>\ncolors[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">\"black\"</span>;               <span class=\"hljs-comment\">// [\"red\", \"blue\", \"green\", empty × 7, \"black\"]</span>\n</code></pre>\n<p>数组的其他常用方法如下：</p>\n<p><strong>1. 检测数组</strong></p>\n<pre><code class=\"language-javascript\">colors <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span> \n<span class=\"hljs-built_in\">Array</span>.isArray(colors)\n</code></pre>\n<p><strong>2.  转换方法</strong></p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>];\n\ncolors.valueOf();      <span class=\"hljs-comment\">// [ 'red', 'blue', 'green' ]</span>\ncolors;                <span class=\"hljs-comment\">// [ 'red', 'blue', 'green' ]</span>\ncolors.toString();     <span class=\"hljs-comment\">// red,blue,green</span>\ncolors.join(<span class=\"hljs-string\">\"|\"</span>);      <span class=\"hljs-comment\">// red|blue|green</span>\n</code></pre>\n<p><strong>3. 栈方法</strong></p>\n<p>ECMAScript 的数组提供了类似栈的特性，能够实现后进先出：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"green\"</span>];\n\ncolors.push(<span class=\"hljs-string\">\"black\"</span>);    <span class=\"hljs-comment\">// [\"red\", \"blue\", \"green\", \"black\"]</span>\ncolors.pop()             <span class=\"hljs-comment\">// \"black\"</span>\ncolors                   <span class=\"hljs-comment\">// [\"red\", \"blue\", \"green\"]</span>\n</code></pre>\n<p><strong>4. 队列方法</strong></p>\n<p>ECMAScript 的数组提供了类似栈的特性，能够实现先进先出：</p>\n<pre><code class=\"language-javascript\">colors.push(<span class=\"hljs-string\">\"black\"</span>,<span class=\"hljs-string\">\"yellow\"</span>);       <span class=\"hljs-comment\">// [\"red\", \"blue\", \"green\", \"black\", \"yellow\"]</span>\ncolors.shift()                       <span class=\"hljs-comment\">// \"red\"</span>\ncolors                               <span class=\"hljs-comment\">// [\"blue\", \"green\", \"black\", \"yellow\"]</span>\n</code></pre>\n<p><strong>5. 重排序方法</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> values = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\nvalues.reverse();\nvalues    <span class=\"hljs-comment\">// [5, 4, 3, 2, 1]</span>\n\n<span class=\"hljs-comment\">// 支持传入排序函数进行自定义排序</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compare</span>(<span class=\"hljs-params\">value1, value2</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (value1 &lt; value2) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value1 &gt; value2) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n}\nvalues.sort(compare)\nvalues    <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<p><strong>6. 操作方法</strong></p>\n<p><strong>concat()</strong> 用于拼接并返回新的数组：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\n<span class=\"hljs-keyword\">var</span> colors2 = colors.concat(<span class=\"hljs-string\">\"yellow\"</span>, [<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"brown\"</span>]);\n\ncolors         <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span>\ncolors2        <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\", \"yellow\", \"black\", \"brown\"]</span>\n</code></pre>\n<p><strong>slice()</strong> 用于截取数组并返回新的数组，它接收两个参数，分别代表截取的开始位置和结束位置，它是一个前开后闭的区间：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"purple\"</span>];\n\n<span class=\"hljs-keyword\">var</span> colors2 = colors.slice(<span class=\"hljs-number\">1</span>);        <span class=\"hljs-comment\">// [\"green\", \"blue\", \"yellow\", \"purple\"]</span>\n<span class=\"hljs-keyword\">var</span> colors3 = colors.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);      <span class=\"hljs-comment\">// [\"red\", \"green\"]</span>\n</code></pre>\n<p><strong>splice()</strong> 用于删除并在删除位置新增数据项，它接收任意个参数，其中第一个参数为删除的开始位置，第二个参数为删除多少个数据项，之后可以接任意个参数，用于表示待插入的数据项：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"yellow\"</span>];\n\ncolors.splice(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)                  <span class=\"hljs-comment\">// 返回删除的数据项：[\"green\", \"blue\"]</span>\ncolors                              <span class=\"hljs-comment\">// [\"red\", \"yellow\"]</span>\n\ncolors.splice(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">\"black\"</span>,<span class=\"hljs-string\">\"green\"</span>)  <span class=\"hljs-comment\">// []</span>\ncolors                              <span class=\"hljs-comment\">// [\"red\", \"black\", \"green\", \"yellow\"]</span>\n</code></pre>\n<p><strong>7. 位置方法</strong></p>\n<p><strong>indexOf()</strong> 和 <strong>lastIndexOf()</strong> 用于查找指定元素的 Index ，它们都接收两个参数：待查找项和查找的起点位置：</p>\n<pre><code class=\"language-shell\">var colors = [\"red\", \"green\", \"blue\", \"yellow\", \"green\", \"blue\"];\n\ncolors.indexOf(\"green\");            // 1\ncolors.indexOf(\"green\", 3);         // 4\ncolors.lastIndexOf(\"green\");        // 4\ncolors.lastIndexOf(\"green\", 3);     // 1\n</code></pre>\n<p><strong>8. 迭代方法</strong></p>\n<p>ECMAScript 5 提供了五个迭代方法：</p>\n<ul>\n<li><strong>every()</strong>：判断数组中的每个元素是否满足指定条件，如果全部满足则返回 true，否则返回 flase；</li>\n<li><strong>some()</strong>：判断数组中的每个元素是否满足指定条件，只要有一个满足则返回 true，否则返回 flase；</li>\n<li><strong>filter()</strong>：过滤并返回符合条件的元素组成的数组。</li>\n<li><strong>forEach()</strong>：对数组中的每一项运行给定函数。</li>\n<li><strong>map()</strong>：对数组中的每一项运行给定函数，并返回每次函数调用结果所组成的数组。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\n\nnumbers.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">3</span>;\n});            \n<span class=\"hljs-comment\">// false</span>\n\nnumbers.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">3</span>;\n});            \n<span class=\"hljs-comment\">// true</span>\n\nnumbers.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">3</span>;\n});            \n<span class=\"hljs-comment\">// [4, 5, 4]</span>\n\nnumbers.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, array</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(value);\n});\n\nnumbers.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, index, array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> value * <span class=\"hljs-number\">10</span>;\n});            \n<span class=\"hljs-comment\">// [10, 20, 30, 40, 50, 40, 30, 20, 10]</span>\n</code></pre>\n<p><strong>9. 归并方法</strong></p>\n<p>ECMAScript 5 提供了两个归并数组的方法： <strong>reduce()</strong> 和 <strong>reduceRight()</strong> 。 它们都接收四个参数：前一个值、当前值、当前项的索引 和 数组本身，使用示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> values = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">var</span> sum01 = values.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">prev, cur, index, array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> prev + cur;\n});    <span class=\"hljs-comment\">// 15</span>\n\n<span class=\"hljs-keyword\">var</span> sum02 = values.reduceRight(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">prev, cur, index, array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> prev + cur;\n});    <span class=\"hljs-comment\">// 15</span>\n</code></pre>\n<h3>3.3 Date 类型</h3>\n<p>创建一个日期对象，可以使用 new 操作符和 Date 构造函数：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> Date();\nnow.toLocaleString()        <span class=\"hljs-comment\">// 2019-9-14 9:53:59 AM</span>\n    \n<span class=\"hljs-keyword\">var</span> date = <span class=\"hljs-keyword\">new</span> Date(<span class=\"hljs-number\">2018</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>);\ndate.toLocaleString();        <span class=\"hljs-comment\">// 2018-8-8 8:30:20 AM</span>\n</code></pre>\n<p>如果你只想知道当前时间的毫秒数，可以直接使用 Date 对象的静态方法：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">Date</span>.now()\n<span class=\"hljs-number\">1568426130593</span>\n</code></pre>\n<p><strong>1. 格式转换</strong></p>\n<ul>\n<li><strong>toLocaleString()</strong> ：按照浏览器所在时区返回相应的日期格式；</li>\n<li><strong>toString()</strong> ：返回日期时间数据和的时区数据；</li>\n<li><strong>valueOf()</strong> ：返回日期的时间戳格式。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2018</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>);\n\n<span class=\"hljs-built_in\">console</span>.log(date.toLocaleString());      <span class=\"hljs-comment\">// 2018-8-8 8:30:20 AM</span>\n<span class=\"hljs-built_in\">console</span>.log(date.toString());            <span class=\"hljs-comment\">// Wed Aug 08 2018 08:30:20 GMT+0800 (GMT+08:00)</span>\n<span class=\"hljs-built_in\">console</span>.log(date.valueOf());             <span class=\"hljs-comment\">// 1533688220000</span>\n</code></pre>\n<p>由于 <strong>valueOf()</strong> 返回的是日期的时间戳格式，所以对于 date 对象，可以直接使用比较运算符来比较其大小：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> date01 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2018</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>);\n<span class=\"hljs-keyword\">var</span> date02 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2016</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>);\n\n<span class=\"hljs-built_in\">console</span>.log(date01 &gt; date02);             <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(date01 &lt; date02);             <span class=\"hljs-comment\">// flase</span>\n</code></pre>\n<p><strong>2. 常用方法</strong></p>\n<ul>\n<li><strong>getTime() \\ setTime(毫秒)</strong> ：返回和设置整个日期的所代表的毫秒数；与 valueOf() 方法返回的值相同；</li>\n<li><strong>getFullYear() \\ setFullYear(年)</strong> ：返回和设置4位数的年份；</li>\n<li><strong>getMonth() \\ setMonth(月)</strong> ：返回和设置月份，其中 0 表示一月， 11 表示十二月；</li>\n<li><strong>getDate() \\ setDate(日)</strong> ：返回和设置月份中的天数（1到31）；</li>\n<li><strong>getDay()</strong> ：返回和设置星期几 ( 其中0表示星期日， 6表示星期六）；</li>\n<li><strong>getHours() \\ setHours(时)</strong> ：返回和设置小时数（0到23）；</li>\n<li><strong>getMinutes() \\ setMinutes(分)</strong> ：返回和设置日期中的分钟数（0到59）；</li>\n<li><strong>getSeconds() \\ setSeconds(秒)</strong> ：返回和设置日期中的秒数（0到59）；</li>\n<li><strong>getMilliseconds() \\ setMilliseconds(毫秒)</strong> ：返回和设置日期中的毫秒数。</li>\n</ul>\n<h3>3.4 Funcation 类型</h3>\n<p><strong>1. 函数参数</strong></p>\n<p>ECMAScript 使用 function 关键字来声明函数，但和其他语言不同的是，ECMAScript 中函数对于参数的限制是非常宽松的，例如你在定义函数时定义了两个参数，但在调用时可以只传递一个参数、也可以传三个参数，甚至不传递，示例如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">function <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(first, second)</span> </span>{\n    console.log(<span class=\"hljs-string\">\"first:\"</span> + first + <span class=\"hljs-string\">\",second:\"</span> + second);\n}\ntest(<span class=\"hljs-number\">1</span>)        <span class=\"hljs-comment\">// first:1,second:undefined</span>\ntest(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)      <span class=\"hljs-comment\">// first:1,second:2</span>\ntest(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)    <span class=\"hljs-comment\">// first:1,second:2</span>\n</code></pre>\n<p>之所以能实现这样的效果，是因为 ECMAScript 在函数内部使用了一个数组 arguments  来维护所有参数，函数接收到的始终都是这个数组，而在实际使用时指向的也是这个数组中的具体元素，所以以上的函数等价于下面的函数：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\">first, second</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"first:\"</span> + <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">\",second:\"</span> + <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>]);\n}\n</code></pre>\n<p><strong>2. 改变函数作用域</strong></p>\n<p>在 ECMAScript 5 中，每个函数都包含两个非继承而来的方法：<strong>apply()</strong> 和 <strong>call()</strong> ，它们都用于在特定的作用域中调用函数。简单来说，可以用这两个方法来改变函数的实际调用对象，从而改变 this 的值，因为 this 总是指向当前函数的实际调用对象：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">window</span>.color = <span class=\"hljs-string\">\"red\"</span>;\n<span class=\"hljs-keyword\">var</span> o = { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"blue\"</span> };\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayColor</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.color);\n}\n\nsayColor();              <span class=\"hljs-comment\">// red</span>\nsayColor.call(<span class=\"hljs-keyword\">this</span>);     <span class=\"hljs-comment\">// red</span>\nsayColor.call(<span class=\"hljs-built_in\">window</span>);   <span class=\"hljs-comment\">// red</span>\nsayColor.call(o);        <span class=\"hljs-comment\">// blue   此时this指向的是函数调用对象，即 o</span>\n</code></pre>\n<p><strong>apply()</strong> 和 <strong>call()</strong> 的第一个参数都是指代函数的调用对象，它们的区别主要在于第二个参数：<strong>apply()</strong> 支持使用数组或 arguments 给调用函数传值，而 <strong>call()</strong> 给调用函数传值时，必须逐个列举：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">num1, num2</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> num1 + num2;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callSum1</span>(<span class=\"hljs-params\">num1, num2</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> sum.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callSum2</span>(<span class=\"hljs-params\">num1, num2</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> sum.apply(<span class=\"hljs-keyword\">this</span>, [num1, num2]);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callSum3</span>(<span class=\"hljs-params\">num1, num2</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> sum.call(<span class=\"hljs-keyword\">this</span>, num1, num2);\n}\n\ncallSum1(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);\ncallSum2(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);\ncallSum3(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);\n</code></pre>\n<p><strong>3. 绑定函数作用域</strong></p>\n<p>如果想要将函数绑定在某个特定的作用域上，可以使用 <strong>bind()</strong> 函数：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">window</span>.color = <span class=\"hljs-string\">\"red\"</span>;\n<span class=\"hljs-keyword\">var</span> o = { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"blue\"</span> };\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayColor</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.color);\n}\n\n<span class=\"hljs-keyword\">var</span> objectSayColor = sayColor.bind(o);\nobjectSayColor();  <span class=\"hljs-comment\">// blue 此时即便是在全局作用域中调用这个函数，其作用域仍然被永远绑定在 o 对象上</span>\n</code></pre>\n<h3>3.5 引用类型检测</h3>\n<p>想要检测某个对象是否属于某个引用类型，可以使用 <strong>instanceof</strong> 关键字：</p>\n<pre><code class=\"language-shell\">var date = new Date();\ndate instanceof Date   // true\n</code></pre>\n<h2>四、内置对象</h2>\n<h3>4.1 Global 对象</h3>\n<p>ECMAScript 中内置了一个全局对象 Global ，任何不属于任何其他对象的属性和方法，最终都是它的属性和方法。 ES 通过该内置对象，提供了一些可以直接调用的全局方法，常用的如下：</p>\n<ul>\n<li><strong>isNaN()</strong>：用于确定一个值是否为 NaN；</li>\n<li><strong>isFinite()</strong>：用于判断被传入的参数值是否为一个有限数值；</li>\n<li><strong>parseInt() \\ parseFloat()</strong>：解析并返回一个整数 \\ 浮点数；</li>\n<li><strong>encodeURI()</strong>：对 URI 进行编码，但不会对本身属于 URI 的特殊字符进行编码，例如冒号、正斜杠、问号和井号；</li>\n<li><strong>encodeURIComponent()</strong>：对 URI 进行编码，会对任何非标准字符进行编码。</li>\n</ul>\n<h3>4.2  window 对象</h3>\n<p>ECMAScript 并没有提供任何直接访问 Global 对象的方法，但是浏览器却基于 Global 扩展实现了 window 对象，可以直接在浏览器环境下使用：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">window</span>.isFinite(<span class=\"hljs-number\">12</span>)  <span class=\"hljs-comment\">// true</span>\na = <span class=\"hljs-number\">12</span>;\n<span class=\"hljs-built_in\">window</span>.a             <span class=\"hljs-comment\">// 12</span>\n</code></pre>\n<h2>五、作用域与闭包</h2>\n<h3>5.1  作用域</h3>\n<p>在 ECMAScript 6 之前，只存在两种作用域，即：全局作用域 和 函数作用域，不存在块级作用域。这意味着在除了函数外的任何代码块中使用 var 关键字声明的变量都会被提升为全局变量，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> age  =<span class=\"hljs-number\">12</span>;\n}\nage  <span class=\"hljs-comment\">// age is not defined</span>\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">\"heibaiying\"</span>;\n}\nname  <span class=\"hljs-comment\">// heibaiying</span>\n</code></pre>\n<p>这种情况同样适用与 for 循环代码块：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {}\n<span class=\"hljs-built_in\">console</span>.log(i);  <span class=\"hljs-comment\">//  10</span>\n</code></pre>\n<h3>5.2 作用域链</h3>\n<p>由于函数作用域的存在，函数内的变量不能被外部访问，但是函数内的变量可以被其内部的函数访问，并且函数也可以访问其父级作用域上的变量，从而形成一条从其自身作用域到全局作用域的链条，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> global = <span class=\"hljs-string\">\"global\"</span>;\n<span class=\"hljs-keyword\">var</span> outer = <span class=\"hljs-string\">\"outer global\"</span>;\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> outer = <span class=\"hljs-string\">\"outer\"</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(global, outer);\n    }\n\n    inner()\n})();\n\n<span class=\"hljs-comment\">// 输出：global outer</span>\n</code></pre>\n<h3>5.3 闭包</h3>\n<p>由于函数作用域的存在，函数内的变量不能被外部访问，这可以保证变量的私有性。但如果你想允许外部对内部变量进行特定操作，可以通过闭包来实现。闭包是指有权访问另一个函数作用域中的变量的函数。示例如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">var</span> contain = function () {\n    \n    <span class=\"hljs-keyword\">var</span> arr = [];\n\n    <span class=\"hljs-keyword\">return</span> {\n        push: function () {\n            arr.push(...arguments);\n        },\n        \n        get: function () {\n            <span class=\"hljs-keyword\">return</span> arr;\n        }\n    }\n};\n\n<span class=\"hljs-keyword\">var</span> ctn = contain();\nctn.push(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\nctn.get();   <span class=\"hljs-comment\">// [ 1, 2, 3, 4 ]</span>\n</code></pre>\n<h2>六、对象设计</h2>\n<p>ECMAScript 中的对象都有两种基本属性：数据属性和访问器属性。</p>\n<h3>6.1 数据属性</h3>\n<p>数据属性有以下 4 个描述其行为的特性：</p>\n<ul>\n<li><strong>Enumerable</strong>：表示该属性能否通过 for-in 循环返回；对于直接在对象上定义的属性， 该值默认为 true。</li>\n<li><strong>Writable</strong>：表示能否修改属性的值；对于直接在对象上定义的属性， 该值默认为 true。</li>\n<li><strong>Value</strong>：对应属性的数据值。默认值为 undefined。</li>\n<li><strong>Configurable</strong>：表示能否对属性进行删除，修改等配置操作，对于直接在对象上定义的属性， 该值默认为 true。需要注意的是一旦将该属性的值设置为 false，就不能再将其设置为 true 。即一旦设置为不可配置，就不能再修改为可配置。因为你已经修改为不可配置，此时任何配置操作都无效了，自然修改 Configurable 属性的操作也无效。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> person = {<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">12</span>};\n<span class=\"hljs-built_in\">Object</span>.defineProperty(person, <span class=\"hljs-string\">\"name\"</span>, {\n    <span class=\"hljs-attr\">Enumerable</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">\"heibai\"</span>\n});\n\n<span class=\"hljs-built_in\">console</span>.log(person.name);      <span class=\"hljs-comment\">// heibai</span>\nperson.name = <span class=\"hljs-string\">\"ying\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(person.name);      <span class=\"hljs-comment\">// ying</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> person) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"key:\"</span> + key + <span class=\"hljs-string\">\",value:\"</span> + person[key])   <span class=\"hljs-comment\">/// key:age,value:12</span>\n}\n</code></pre>\n<h3>6.2 访问器属性</h3>\n<p>访问器属性也有以下 4 个描述其行为的特性：</p>\n<ul>\n<li><strong>Configurable</strong>：表示能否对属性进行删除，修改等配置操作；对于直接在对象上定义的属性， 该值默认为 true。</li>\n<li><strong>Enumerable</strong>：表示该属性能否通过 for-in 循环返回；对于直接在对象上定义的属性， 该值默认为 true。</li>\n<li><strong>Get</strong>：在读取属性时调用的函数。默认值为 undefined。</li>\n<li><strong>Set</strong>：在写入属性时调用的函数。默认值为 undefined。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> student = {\n    <span class=\"hljs-attr\">_age</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">birthday</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2012</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">2</span>)\n};\n<span class=\"hljs-built_in\">Object</span>.defineProperty(student, <span class=\"hljs-string\">\"age\"</span>, {\n   \n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>._age == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-comment\">// 如果年龄不存在就根据出生日期计算</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-keyword\">this</span>.birthday.getFullYear()\n        }<span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._age;\n        }\n    },\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newValue</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (newValue &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"年龄不能设置为负数\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">this</span>._age = newValue;\n        }\n    }\n});\n\nstudent.age = <span class=\"hljs-number\">-1</span>;            <span class=\"hljs-comment\">// 输出：年龄不能设置为负数</span>\n<span class=\"hljs-built_in\">console</span>.log(student.age);    <span class=\"hljs-comment\">// 输出：7</span>\nstudent.age = <span class=\"hljs-number\">12</span>;\n<span class=\"hljs-built_in\">console</span>.log(student.age);    <span class=\"hljs-comment\">// 输出 12</span>\n</code></pre>\n<h3>6.3  读取属性</h3>\n<p>想要获取一个对象的数据属性和访问器属性，可以使用 <strong>Object.getOwnPropertyDescriptor()</strong> 方法，类似于其他语言中的反射机制。这个方法接收两个参数：属性所在的对象和要读取属性名称。沿用上面的例子，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> descriptor = <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(student, <span class=\"hljs-string\">\"age\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(descriptor.get);          <span class=\"hljs-comment\">// 输出 [Function: get]</span>\n<span class=\"hljs-built_in\">console</span>.log(descriptor.enumerable);   <span class=\"hljs-comment\">// 输出 false</span>\n</code></pre>\n<h3>6.4 创建对象</h3>\n<p>在 ECMAScript 中，对象就是一种特殊的函数，想要声明一个对象，可以结合使用构造器模式和原型模式：基本属性可以通过构造器传入；但方法声明需要定义在原型属性上，如果直接定义在构造器上，每个对象实例都会创建该方法函数，即每个对象实例调用的都是自己重复声明的方法函数，示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name, age, job</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.age = age;\n    <span class=\"hljs-keyword\">this</span>.job = job;\n    <span class=\"hljs-keyword\">this</span>.friends = [<span class=\"hljs-string\">\"hei\"</span>, <span class=\"hljs-string\">\"bai\"</span>];\n    <span class=\"hljs-comment\">// 方法应该声明在原型属性上，而不是这里</span>\n    <span class=\"hljs-keyword\">this</span>.sayAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.age)\n    }\n}\n\nPerson.prototype = {\n    <span class=\"hljs-attr\">constructor</span>: Person,\n    <span class=\"hljs-comment\">// 方法应该声明在这</span>\n    sayName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        alert(<span class=\"hljs-keyword\">this</span>.name);\n    }\n}\n\n\n<span class=\"hljs-keyword\">var</span> person1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"user01\"</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-string\">\"Software Engineer\"</span>);\n<span class=\"hljs-keyword\">var</span> person2 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"user02\"</span>, <span class=\"hljs-number\">27</span>, <span class=\"hljs-string\">\"Doctor\"</span>);\n\nperson1.friends.push(<span class=\"hljs-string\">\"ying\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(person1.friends);                     <span class=\"hljs-comment\">// [ 'hei', 'bai', 'ying' ]</span>\n<span class=\"hljs-built_in\">console</span>.log(person2.friends);                     <span class=\"hljs-comment\">// [ 'hei', 'bai']</span>\n<span class=\"hljs-built_in\">console</span>.log(person1 <span class=\"hljs-keyword\">instanceof</span> Person);           <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(person1.constructor === Person);      <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(person1.sayName === person2.sayName); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(person1.sayAge===person2.sayAge);     <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h2>参考资料</h2>\n<ol>\n<li>尼古拉斯·泽卡斯 . JavaScript高级程序设计（第3版）. 人民邮电出版社 . 2012-3-29</li>\n<li><a href=\"http://caibaojian.com/js-tofixed.html\">JS中小数四舍五入和浮点数的研究</a></li>\n</ol>\n",
  "link": "\\zh-cn\\blog\\web\\javascript.html",
  "meta": {}
}