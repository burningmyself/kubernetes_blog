{
  "filename": "js_tool_method.md",
  "__html": "<h1>JavaScript 工具函数大全</h1>\n<h2>数组</h2>\n<ol>\n<li>all：布尔全等判断</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> all = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn = <span class=\"hljs-built_in\">Boolean</span></span>) =&gt;</span> arr.every(fn);\n\nall([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], x =&gt; x &gt; <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span>\nall([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>allEqual：检查数组各项相等</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> allEqual = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> arr.every(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> val === arr[<span class=\"hljs-number\">0</span>]);\n\nallEqual([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]); <span class=\"hljs-comment\">// false</span>\nallEqual([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"3\">\n<li>approximatelyEqual：约等于</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> approximatelyEqual = <span class=\"hljs-function\">(<span class=\"hljs-params\">v1, v2, epsilon = <span class=\"hljs-number\">0.001</span></span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.abs(v1 - v2) &lt; epsilon;\n\napproximatelyEqual(<span class=\"hljs-built_in\">Math</span>.PI / <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">1.5708</span>); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"4\">\n<li>arrayToCSV：数组转CSV格式（带空格的字符串）</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> arrayToCSV = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, delimiter = <span class=\"hljs-string\">','</span></span>) =&gt;</span>\n  arr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v.map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-string\">`\"<span class=\"hljs-subst\">${x}</span>\"`</span>).join(delimiter)).join(<span class=\"hljs-string\">'\\n'</span>);\n  \narrayToCSV([[<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>]]); <span class=\"hljs-comment\">// '\"a\",\"b\"\\n\"c\",\"d\"'</span>\narrayToCSV([[<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>]], <span class=\"hljs-string\">';'</span>); <span class=\"hljs-comment\">// '\"a\";\"b\"\\n\"c\";\"d\"'</span>\n\n</code></pre>\n<ol start=\"5\">\n<li>arrayToHtmlList：数组转li列表</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> arrayToHtmlList = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, listID</span>) =&gt;</span>\n  (<span class=\"hljs-function\"><span class=\"hljs-params\">el</span> =&gt;</span> (\n    (el = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#'</span> + listID)),\n    (el.innerHTML += arr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-string\">`&lt;li&gt;<span class=\"hljs-subst\">${item}</span>&lt;/li&gt;`</span>).join(<span class=\"hljs-string\">''</span>))\n  ))();\n  \narrayToHtmlList([<span class=\"hljs-string\">'item 1'</span>, <span class=\"hljs-string\">'item 2'</span>], <span class=\"hljs-string\">'myListID'</span>);\n\n</code></pre>\n<ol start=\"6\">\n<li>average：平均数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> average = <span class=\"hljs-function\">(<span class=\"hljs-params\">...nums</span>) =&gt;</span> nums.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"hljs-number\">0</span>) / nums.length;\naverage(...[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// 2</span>\naverage(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 2</span>\n\n</code></pre>\n<ol start=\"7\">\n<li>averageBy：数组对象属性平均数</li>\n</ol>\n<p>此代码段将获取数组对象属性的平均值</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> averageBy = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =&gt;</span>\n  arr.map(<span class=\"hljs-keyword\">typeof</span> fn === <span class=\"hljs-string\">'function'</span> ? fn : <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> val[fn]).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"hljs-number\">0</span>) /\n  arr.length;\n  \naverageBy([{ <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">4</span> }, { <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">8</span> }, { <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">6</span> }], o =&gt; o.n); <span class=\"hljs-comment\">// 5</span>\naverageBy([{ <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">4</span> }, { <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">8</span> }, { <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">6</span> }], <span class=\"hljs-string\">'n'</span>); <span class=\"hljs-comment\">// 5</span>\n\n</code></pre>\n<ol start=\"8\">\n<li>bifurcate：拆分断言后的数组</li>\n</ol>\n<p>可以根据每个元素返回的值，使用reduce()和push() 将元素添加到第二次参数fn中 。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> bifurcate = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, filter</span>) =&gt;</span>\n  arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val, i</span>) =&gt;</span> (acc[filter[i] ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>].push(val), acc), [[], []]);\nbifurcate([<span class=\"hljs-string\">'beep'</span>, <span class=\"hljs-string\">'boop'</span>, <span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>], [<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>]); \n<span class=\"hljs-comment\">// [ ['beep', 'boop', 'bar'], ['foo'] ]</span>\n\n</code></pre>\n<ol start=\"9\">\n<li>castArray：其它类型转数组</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> castArray = <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> (<span class=\"hljs-built_in\">Array</span>.isArray(val) ? val : [val]);\n\ncastArray(<span class=\"hljs-string\">'foo'</span>); <span class=\"hljs-comment\">// ['foo']</span>\ncastArray([<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// [1]</span>\ncastArray(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// [1]</span>\n\n</code></pre>\n<ol start=\"10\">\n<li>compact：去除数组中的无效/无用值</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> compact = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> arr.filter(<span class=\"hljs-built_in\">Boolean</span>);\n\ncompact([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">''</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'e'</span> * <span class=\"hljs-number\">23</span>, <span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-string\">'s'</span>, <span class=\"hljs-number\">34</span>]); \n<span class=\"hljs-comment\">// [ 1, 2, 3, 'a', 's', 34 ]</span>\n\n</code></pre>\n<ol start=\"11\">\n<li>countOccurrences：检测数值出现次数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> countOccurrences = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, val</span>) =&gt;</span> arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, v</span>) =&gt;</span> (v === val ? a + <span class=\"hljs-number\">1</span> : a), <span class=\"hljs-number\">0</span>);\ncountOccurrences([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 3</span>\n\n</code></pre>\n<ol start=\"12\">\n<li>deepFlatten：递归扁平化数组</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> deepFlatten = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> [].concat(...arr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> (<span class=\"hljs-built_in\">Array</span>.isArray(v) ? deepFlatten(v) : v)));\n\ndeepFlatten([<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>], [[<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// [1,2,3,4,5]</span>\n\n</code></pre>\n<ol start=\"13\">\n<li>difference：寻找差异（并返回第一个数组独有的）</li>\n</ol>\n<p>此代码段查找两个数组之间的差异，并返回第一个数组独有的。</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> difference = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(b);\n  <span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> !s.has(x));\n};\n\ndifference([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// [3]</span>\n\n</code></pre>\n<ol start=\"14\">\n<li>differenceBy：先执行再寻找差异</li>\n</ol>\n<p>在将给定函数应用于两个列表的每个元素之后，此方法返回两个数组之间的差异。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> differenceBy = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b, fn</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(b.map(fn));\n  <span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> !s.has(fn(x)));\n};\n\ndifferenceBy([<span class=\"hljs-number\">2.1</span>, <span class=\"hljs-number\">1.2</span>], [<span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">3.4</span>], <span class=\"hljs-built_in\">Math</span>.floor); <span class=\"hljs-comment\">// [1.2]</span>\ndifferenceBy([{ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span> }], [{ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span> }], v =&gt; v.x); <span class=\"hljs-comment\">// [ { x: 2 } ]</span>\n\n</code></pre>\n<ol start=\"15\">\n<li>dropWhile：删除不符合条件的值</li>\n</ol>\n<p>此代码段从数组顶部开始删除元素，直到传递的函数返回为true。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> dropWhile = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, func</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">while</span> (arr.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; !func(arr[<span class=\"hljs-number\">0</span>])) arr = arr.slice(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> arr;\n};\n\ndropWhile([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], n =&gt; n &gt;= <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// [3,4]</span>\n\n</code></pre>\n<ol start=\"16\">\n<li>flatten：指定深度扁平化数组</li>\n</ol>\n<p>此代码段第二参数可指定深度。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> flatten = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, depth = <span class=\"hljs-number\">1</span></span>) =&gt;</span>\n  arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, v</span>) =&gt;</span> a.concat(depth &gt; <span class=\"hljs-number\">1</span> &amp;&amp; <span class=\"hljs-built_in\">Array</span>.isArray(v) ? flatten(v, depth - <span class=\"hljs-number\">1</span>) : v), []);\n\nflatten([<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\nflatten([<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">6</span>], <span class=\"hljs-number\">7</span>], <span class=\"hljs-number\">8</span>], <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// [1, 2, 3, [4, 5], 6, 7, 8]</span>\n\n</code></pre>\n<ol start=\"17\">\n<li>indexOfAll：返回数组中某值的所有索引</li>\n</ol>\n<p>此代码段可用于获取数组中某个值的所有索引，如果此值中未包含该值，则返回一个空数组。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> indexOfAll = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, val</span>) =&gt;</span> arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, el, i</span>) =&gt;</span> (el === val ? [...acc, i] : acc), []);\n\nindexOfAll([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// [0,3]</span>\nindexOfAll([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// []</span>\n\n</code></pre>\n<ol start=\"18\">\n<li>intersection：两数组的交集</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> intersection = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(b);\n  <span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> s.has(x));\n};\n\nintersection([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// [2, 3]</span>\n\n</code></pre>\n<ol start=\"19\">\n<li>intersectionWith：两数组都符合条件的交集</li>\n</ol>\n<p>此片段可用于在对两个数组的每个元素执行了函数之后，返回两个数组中存在的元素列表。</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> intersectionBy = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b, fn</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(b.map(fn));\n  <span class=\"hljs-keyword\">return</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> s.has(fn(x)));\n};\n\nintersectionBy([<span class=\"hljs-number\">2.1</span>, <span class=\"hljs-number\">1.2</span>], [<span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">3.4</span>], <span class=\"hljs-built_in\">Math</span>.floor); <span class=\"hljs-comment\">// [2.1]</span>\n\n</code></pre>\n<ol start=\"20\">\n<li>intersectionWith：先比较后返回交集</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> intersectionWith = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b, comp</span>) =&gt;</span> a.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> b.findIndex(<span class=\"hljs-function\"><span class=\"hljs-params\">y</span> =&gt;</span> comp(x, y)) !== <span class=\"hljs-number\">-1</span>);\n\nintersectionWith([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1.9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3.9</span>], (a, b) =&gt; <span class=\"hljs-built_in\">Math</span>.round(a) === <span class=\"hljs-built_in\">Math</span>.round(b)); <span class=\"hljs-comment\">// [1.5, 3, 0]</span>\n\n</code></pre>\n<ol start=\"21\">\n<li>minN：返回指定长度的升序数组</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> minN = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, n = <span class=\"hljs-number\">1</span></span>) =&gt;</span> [...arr].sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a - b).slice(<span class=\"hljs-number\">0</span>, n);\n\nminN([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// [1]</span>\nminN([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// [1,2]</span>\n\n</code></pre>\n<ol start=\"22\">\n<li>negate：根据条件反向筛选</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> negate = <span class=\"hljs-function\"><span class=\"hljs-params\">func</span> =&gt;</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> !func(...args);\n\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>].filter(negate(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> n % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// [ 1, 3, 5 ]</span>\n\n</code></pre>\n<ol start=\"23\">\n<li>randomIntArrayInRange：生成两数之间指定长度的随机数组</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> randomIntArrayInRange = <span class=\"hljs-function\">(<span class=\"hljs-params\">min, max, n = <span class=\"hljs-number\">1</span></span>) =&gt;</span>\n  <span class=\"hljs-built_in\">Array</span>.from({ <span class=\"hljs-attr\">length</span>: n }, () =&gt; <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * (max - min + <span class=\"hljs-number\">1</span>)) + min);\n  \nrandomIntArrayInRange(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]</span>\n\n</code></pre>\n<ol start=\"24\">\n<li>sample：在指定数组中获取随机数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> sample = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> arr[<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * arr.length)];\n\nsample([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">11</span>]); <span class=\"hljs-comment\">// 9</span>\n\n</code></pre>\n<ol start=\"25\">\n<li>sampleSize：在指定数组中获取指定长度的随机数</li>\n</ol>\n<p>此代码段可用于从数组中获取指定长度的随机数，直至穷尽数组。 使用Fisher-Yates算法对数组中的元素进行随机选择。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> sampleSize = <span class=\"hljs-function\">(<span class=\"hljs-params\">[...arr], n = <span class=\"hljs-number\">1</span></span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> m = arr.length;\n  <span class=\"hljs-keyword\">while</span> (m) {\n    <span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  <span class=\"hljs-keyword\">return</span> arr.slice(<span class=\"hljs-number\">0</span>, n);\n};\n\nsampleSize([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// [3,1]</span>\nsampleSize([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// [2,3,1]</span>\n\n</code></pre>\n<ol start=\"26\">\n<li>shuffle：“洗牌” 数组</li>\n</ol>\n<p>此代码段使用Fisher-Yates算法随机排序数组的元素。</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> shuffle = <span class=\"hljs-function\">(<span class=\"hljs-params\">[...arr]</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> m = arr.length;\n  <span class=\"hljs-keyword\">while</span> (m) {\n    <span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  <span class=\"hljs-keyword\">return</span> arr;\n};\n\n<span class=\"hljs-keyword\">const</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nshuffle(foo); <span class=\"hljs-comment\">// [2, 3, 1], foo = [1, 2, 3]</span>\n\n</code></pre>\n<ol start=\"27\">\n<li>nest：根据parent_id生成树结构（阿里一面真题）</li>\n</ol>\n<p>根据每项的parent_id，生成具体树形结构的对象。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> nest = <span class=\"hljs-function\">(<span class=\"hljs-params\">items, id = <span class=\"hljs-literal\">null</span>, link = <span class=\"hljs-string\">'parent_id'</span></span>) =&gt;</span>\n  items\n    .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item[link] === id)\n    .map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> ({ ...item, <span class=\"hljs-attr\">children</span>: nest(items, item.id) }));\n\n</code></pre>\n<p>用法：</p>\n<pre><code class=\"language-js\">  <span class=\"hljs-keyword\">const</span> comments = [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">parent_id</span>: <span class=\"hljs-literal\">null</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">parent_id</span>: <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">parent_id</span>: <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">parent_id</span>: <span class=\"hljs-number\">2</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">parent_id</span>: <span class=\"hljs-number\">4</span> }\n];\n<span class=\"hljs-keyword\">const</span> nestedComments = nest(comments); <span class=\"hljs-comment\">// [{ id: 1, parent_id: null, children: [...] }]</span>\n\n</code></pre>\n<h2>函数</h2>\n<ol>\n<li>attempt：捕获函数运行异常</li>\n</ol>\n<p>该代码段执行一个函数，返回结果或捕获的错误对象。</p>\n<pre><code class=\"language-js\">onst attempt = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, ...args</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">return</span> fn(...args);\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-keyword\">return</span> e <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span> ? e : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(e);\n  }\n};\n<span class=\"hljs-keyword\">var</span> elements = attempt(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.querySelectorAll(selector);\n}, <span class=\"hljs-string\">'&gt;_&gt;'</span>);\n<span class=\"hljs-keyword\">if</span> (elements <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) elements = []; <span class=\"hljs-comment\">// elements = []</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>defer：推迟执行</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> defer = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, ...args</span>) =&gt;</span> setTimeout(fn, <span class=\"hljs-number\">1</span>, ...args);\n\ndefer(<span class=\"hljs-built_in\">console</span>.log, <span class=\"hljs-string\">'a'</span>), <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'b'</span>); <span class=\"hljs-comment\">// logs 'b' then 'a'</span>\n\n</code></pre>\n<ol start=\"3\">\n<li>runPromisesInSeries：运行多个Promises</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> runPromisesInSeries = <span class=\"hljs-function\"><span class=\"hljs-params\">ps</span> =&gt;</span> ps.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, next</span>) =&gt;</span> p.then(next), <span class=\"hljs-built_in\">Promise</span>.resolve());\n<span class=\"hljs-keyword\">const</span> delay = <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =&gt;</span> setTimeout(r, d));\n\nrunPromisesInSeries([<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> delay(<span class=\"hljs-number\">1000</span>), () =&gt; delay(<span class=\"hljs-number\">2000</span>)]);\n<span class=\"hljs-comment\">//依次执行每个Promises ，总共需要3秒钟才能完成</span>\n\n</code></pre>\n<ol start=\"4\">\n<li>timeTaken：计算函数执行时间</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> timeTaken = <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'timeTaken'</span>);\n  <span class=\"hljs-keyword\">const</span> r = callback();\n  <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'timeTaken'</span>);\n  <span class=\"hljs-keyword\">return</span> r;\n};\n\ntimeTaken(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>)); <span class=\"hljs-comment\">// 1024, (logged): timeTaken: 0.02099609375ms</span>\n\n</code></pre>\n<ol start=\"5\">\n<li>createEventHub：简单的发布/订阅模式</li>\n</ol>\n<p>创建一个发布/订阅（发布-订阅）事件集线，有emit，on和off方法。</p>\n<ul>\n<li>使用Object.create(null)创建一个空的hub对象。</li>\n<li>emit，根据event参数解析处理程序数组，然后.forEach()通过传入数据作为参数来运行每个处理程序。</li>\n<li>on，为事件创建一个数组（若不存在则为空数组），然后.push()将处理程序添加到该数组。</li>\n<li>off，用.findIndex()在事件数组中查找处理程序的索引，并使用.splice()删除。</li>\n</ul>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> createEventHub = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">hub</span>: <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>),\n  emit(event, data) {\n    (<span class=\"hljs-keyword\">this</span>.hub[event] || []).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">handler</span> =&gt;</span> handler(data));\n  },\n  on(event, handler) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.hub[event]) <span class=\"hljs-keyword\">this</span>.hub[event] = [];\n    <span class=\"hljs-keyword\">this</span>.hub[event].push(handler);\n  },\n  off(event, handler) {\n    <span class=\"hljs-keyword\">const</span> i = (<span class=\"hljs-keyword\">this</span>.hub[event] || []).findIndex(<span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h === handler);\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">this</span>.hub[event].splice(i, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.hub[event].length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">this</span>.hub[event];\n  }\n});\n\n</code></pre>\n<p>用法：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> handler = <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data);\n<span class=\"hljs-keyword\">const</span> hub = createEventHub();\n<span class=\"hljs-keyword\">let</span> increment = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// 订阅，监听不同事件</span>\nhub.on(<span class=\"hljs-string\">'message'</span>, handler);\nhub.on(<span class=\"hljs-string\">'message'</span>, () =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Message event fired'</span>));\nhub.on(<span class=\"hljs-string\">'increment'</span>, () =&gt; increment++);\n\n<span class=\"hljs-comment\">// 发布：发出事件以调用所有订阅给它们的处理程序，并将数据作为参数传递给它们</span>\nhub.emit(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-string\">'hello world'</span>); <span class=\"hljs-comment\">// 打印 'hello world' 和 'Message event fired'</span>\nhub.emit(<span class=\"hljs-string\">'message'</span>, { <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">'world'</span> }); <span class=\"hljs-comment\">// 打印 对象 和 'Message event fired'</span>\nhub.emit(<span class=\"hljs-string\">'increment'</span>); <span class=\"hljs-comment\">// increment = 1</span>\n\n<span class=\"hljs-comment\">// 停止订阅</span>\nhub.off(<span class=\"hljs-string\">'message'</span>, handler);\n\n</code></pre>\n<ol start=\"6\">\n<li>memoize：缓存函数</li>\n</ol>\n<p>通过实例化一个Map对象来创建一个空的缓存。</p>\n<p>通过检查输入值的函数输出是否已缓存，返回存储一个参数的函数，该参数将被提供给已记忆的函数；如果没有，则存储并返回它。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> memoize = <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n  <span class=\"hljs-keyword\">const</span> cached = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> cache.has(val) ? cache.get(val) : cache.set(val, fn.call(<span class=\"hljs-keyword\">this</span>, val)) &amp;&amp; cache.get(val);\n  };\n  cached.cache = cache;\n  <span class=\"hljs-keyword\">return</span> cached;\n};\n\n\n</code></pre>\n<p>Ps: 这个版本可能不是很清晰，还有Vue源码版的：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/**\n * Create a cached version of a pure function.\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cached</span>&lt;<span class=\"hljs-title\">F</span>: <span class=\"hljs-title\">Function</span>&gt; (<span class=\"hljs-params\">fn: F</span>): <span class=\"hljs-title\">F</span> </span>{\n  <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cachedFn</span> (<span class=\"hljs-params\">str: string</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> hit = cache[str]\n    <span class=\"hljs-keyword\">return</span> hit || (cache[str] = fn(str))\n  }: any)\n}\n\n</code></pre>\n<ol start=\"7\">\n<li>once：只调用一次的函数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> once = <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> called = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!called) {\n      called = <span class=\"hljs-literal\">true</span>\n      fn.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n    }\n  }\n};\n\n</code></pre>\n<ol start=\"8\">\n<li>flattenObject：以键的路径扁平化对象</li>\n</ol>\n<p>使用递归。</p>\n<ul>\n<li>利用Object.keys(obj)联合Array.prototype.reduce()，以每片叶子节点转换为扁平的路径节点。</li>\n<li>如果键的值是一个对象，则函数使用调用适当的自身prefix以创建路径Object.assign()。</li>\n<li>否则，它将适当的前缀键值对添加到累加器对象。</li>\n<li>prefix除非您希望每个键都有一个前缀，否则应始终省略第二个参数。</li>\n</ul>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> flattenObject = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj, prefix = <span class=\"hljs-string\">''</span></span>) =&gt;</span>\n  <span class=\"hljs-built_in\">Object</span>.keys(obj).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, k</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> pre = prefix.length ? prefix + <span class=\"hljs-string\">'.'</span> : <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj[k] === <span class=\"hljs-string\">'object'</span>) <span class=\"hljs-built_in\">Object</span>.assign(acc, flattenObject(obj[k], pre + k));\n    <span class=\"hljs-keyword\">else</span> acc[pre + k] = obj[k];\n    <span class=\"hljs-keyword\">return</span> acc;\n  }, {});\n  \nflattenObject({ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> } }, <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// { 'a.b.c': 1, d: 1 }</span>\n\n</code></pre>\n<ol start=\"9\">\n<li>unflattenObject：以键的路径展开对象</li>\n</ol>\n<p>与上面的相反，展开对象。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> unflattenObject = <span class=\"hljs-function\"><span class=\"hljs-params\">obj</span> =&gt;</span>\n  <span class=\"hljs-built_in\">Object</span>.keys(obj).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, k</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (k.indexOf(<span class=\"hljs-string\">'.'</span>) !== <span class=\"hljs-number\">-1</span>) {\n      <span class=\"hljs-keyword\">const</span> keys = k.split(<span class=\"hljs-string\">'.'</span>);\n      <span class=\"hljs-built_in\">Object</span>.assign(\n        acc,\n        <span class=\"hljs-built_in\">JSON</span>.parse(\n          <span class=\"hljs-string\">'{'</span> +\n            keys.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">v, i</span>) =&gt;</span> (i !== keys.length - <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">`\"<span class=\"hljs-subst\">${v}</span>\":{`</span> : <span class=\"hljs-string\">`\"<span class=\"hljs-subst\">${v}</span>\":`</span>)).join(<span class=\"hljs-string\">''</span>) +\n            obj[k] +\n            <span class=\"hljs-string\">'}'</span>.repeat(keys.length)\n        )\n      );\n    } <span class=\"hljs-keyword\">else</span> acc[k] = obj[k];\n    <span class=\"hljs-keyword\">return</span> acc;\n  }, {});\n  \nunflattenObject({ <span class=\"hljs-string\">'a.b.c'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// { a: { b: { c: 1 } }, d: 1 }</span>\n\n</code></pre>\n<p>这个的用途，在做Tree组件或复杂表单时取值非常舒服。</p>\n<h2>字符串</h2>\n<ol>\n<li>byteSize：返回字符串的字节长度</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> byteSize = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> Blob([str]).size;\n\nbyteSize(<span class=\"hljs-string\">'😀'</span>); <span class=\"hljs-comment\">// 4</span>\nbyteSize(<span class=\"hljs-string\">'Hello World'</span>); <span class=\"hljs-comment\">// 11</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>capitalize：首字母大写</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> capitalize = <span class=\"hljs-function\">(<span class=\"hljs-params\">[first, ...rest]</span>) =&gt;</span>\n  first.toUpperCase() + rest.join(<span class=\"hljs-string\">''</span>);\n  \ncapitalize(<span class=\"hljs-string\">'fooBar'</span>); <span class=\"hljs-comment\">// 'FooBar'</span>\ncapitalize(<span class=\"hljs-string\">'fooBar'</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 'Foobar'</span>\n\n</code></pre>\n<ol start=\"3\">\n<li>capitalizeEveryWord：每个单词首字母大写</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> capitalizeEveryWord = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.replace(<span class=\"hljs-regexp\">/\\b[a-z]/g</span>, char =&gt; char.toUpperCase());\n\ncapitalizeEveryWord(<span class=\"hljs-string\">'hello world!'</span>); <span class=\"hljs-comment\">// 'Hello World!'</span>\n\n</code></pre>\n<ol start=\"4\">\n<li>decapitalize：首字母小写</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> decapitalize = <span class=\"hljs-function\">(<span class=\"hljs-params\">[first, ...rest]</span>) =&gt;</span>\n  first.toLowerCase() + rest.join(<span class=\"hljs-string\">''</span>)\n\ndecapitalize(<span class=\"hljs-string\">'FooBar'</span>); <span class=\"hljs-comment\">// 'fooBar'</span>\ndecapitalize(<span class=\"hljs-string\">'FooBar'</span>); <span class=\"hljs-comment\">// 'fooBar'</span>\n\n</code></pre>\n<ol start=\"5\">\n<li>luhnCheck：银行卡号码校验（luhn算法）</li>\n</ol>\n<p>Luhn算法的实现，用于验证各种标识号，例如信用卡号，IMEI号，国家提供商标识号等。</p>\n<p>与String.prototype.split('')结合使用，以获取数字数组。获得最后一个数字。实施luhn算法。如果被整除，则返回，否则返回。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> luhnCheck = <span class=\"hljs-function\"><span class=\"hljs-params\">num</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> arr = (num + <span class=\"hljs-string\">''</span>)\n    .split(<span class=\"hljs-string\">''</span>)\n    .reverse()\n    .map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-built_in\">parseInt</span>(x));\n  <span class=\"hljs-keyword\">let</span> lastDigit = arr.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">let</span> sum = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val, i</span>) =&gt;</span> (i % <span class=\"hljs-number\">2</span> !== <span class=\"hljs-number\">0</span> ? acc + val : acc + ((val * <span class=\"hljs-number\">2</span>) % <span class=\"hljs-number\">9</span>) || <span class=\"hljs-number\">9</span>), <span class=\"hljs-number\">0</span>);\n  sum += lastDigit;\n  <span class=\"hljs-keyword\">return</span> sum % <span class=\"hljs-number\">10</span> === <span class=\"hljs-number\">0</span>;\n};\n\n</code></pre>\n<p>用例:</p>\n<pre><code class=\"language-js\">luhnCheck(<span class=\"hljs-string\">'4485275742308327'</span>); <span class=\"hljs-comment\">// true</span>\nluhnCheck(<span class=\"hljs-number\">6011329933655299</span>); <span class=\"hljs-comment\">//  false</span>\nluhnCheck(<span class=\"hljs-number\">123456789</span>); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>补充：银行卡号码的校验规则：</p>\n<p>银行卡号码的校验采用Luhn算法，校验过程大致如下：</p>\n<ul>\n<li>从右到左给卡号字符串编号，最右边第一位是1，最右边第二位是2，最右边第三位是3….</li>\n<li>从右向左遍历，对每一位字符t执行第三个步骤，并将每一位的计算结果相加得到一个数s。</li>\n<li>对每一位的计算规则：如果这一位是奇数位，则返回t本身，如果是偶数位，则先将t乘以2得到一个数n，如果n是一位数（小于10），直接返回n，否则将n的个位数和十位数相加返回。</li>\n<li>如果s能够整除10，则此号码有效，否则号码无效。</li>\n</ul>\n<p>因为最终的结果会对10取余来判断是否能够整除10，所以又叫做模10算法。\n当然，还是库比较香: bankcardinfo</p>\n<ol start=\"6\">\n<li>splitLines：将多行字符串拆分为行数组。</li>\n</ol>\n<p>使用String.prototype.split()和正则表达式匹配换行符并创建一个数组。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> splitLines = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.split(<span class=\"hljs-regexp\">/\\r?\\n/</span>);\n\nsplitLines(<span class=\"hljs-string\">'This\\nis a\\nmultiline\\nstring.\\n'</span>); <span class=\"hljs-comment\">// ['This', 'is a', 'multiline', 'string.' , '']</span>\n\n</code></pre>\n<ol start=\"7\">\n<li>stripHTMLTags：删除字符串中的HTMl标签</li>\n</ol>\n<p>从字符串中删除HTML / XML标签。</p>\n<p>使用正则表达式从字符串中删除HTML / XML 标记。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> stripHTMLTags = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span> str.replace(<span class=\"hljs-regexp\">/&lt;[^&gt;]*&gt;/g</span>, <span class=\"hljs-string\">''</span>);\n\nstripHTMLTags(<span class=\"hljs-string\">'&lt;p&gt;&lt;em&gt;lorem&lt;/em&gt; &lt;strong&gt;ipsum&lt;/strong&gt;&lt;/p&gt;'</span>); <span class=\"hljs-comment\">// 'lorem ipsum'</span>\n\n</code></pre>\n<h2>对象</h2>\n<ol>\n<li>dayOfYear：当前日期天数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> dayOfYear = <span class=\"hljs-function\"><span class=\"hljs-params\">date</span> =&gt;</span>\n  <span class=\"hljs-built_in\">Math</span>.floor((date - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date.getFullYear(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">24</span>);\n\ndayOfYear(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()); <span class=\"hljs-comment\">// 285</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>forOwn：迭代属性并执行回调</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> forOwn = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj, fn</span>) =&gt;</span> <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> fn(obj[key], key, obj));\nforOwn({ <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">'bar'</span>, <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, v =&gt; <span class=\"hljs-built_in\">console</span>.log(v)); <span class=\"hljs-comment\">// 'bar', 1</span>\n\n</code></pre>\n<ol start=\"3\">\n<li>Get Time From Date：返回当前24小时制时间的字符串</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> getColonTimeFromDate = <span class=\"hljs-function\"><span class=\"hljs-params\">date</span> =&gt;</span> date.toTimeString().slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);\n\ngetColonTimeFromDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()); <span class=\"hljs-comment\">// \"08:38:00\"</span>\n\n</code></pre>\n<ol start=\"4\">\n<li>Get Days Between Dates：返回日期间的天数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> getDaysDiffBetweenDates = <span class=\"hljs-function\">(<span class=\"hljs-params\">dateInitial, dateFinal</span>) =&gt;</span>\n  (dateFinal - dateInitial) / (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">24</span>);\n  \ngetDaysDiffBetweenDates(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2019-01-01'</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2019-10-14'</span>)); <span class=\"hljs-comment\">// 286</span>\n\n</code></pre>\n<ol start=\"5\">\n<li>is：检查值是否为特定类型。</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> is = <span class=\"hljs-function\">(<span class=\"hljs-params\">type, val</span>) =&gt;</span> ![, <span class=\"hljs-literal\">null</span>].includes(val) &amp;&amp; val.constructor === type;\n\nis(<span class=\"hljs-built_in\">Array</span>, [<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">ArrayBuffer</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>()); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">Map</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">RegExp</span>, /./g); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">Set</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>()); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">WeakMap</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>()); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">WeakSet</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakSet</span>()); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-string\">''</span>); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">''</span>)); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">Number</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">Number</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">Boolean</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// true</span>\nis(<span class=\"hljs-built_in\">Boolean</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">true</span>)); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"6\">\n<li>isAfterDate：检查是否在某日期后</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> isAfterDate = <span class=\"hljs-function\">(<span class=\"hljs-params\">dateA, dateB</span>) =&gt;</span> dateA &gt; dateB;\n\nisAfterDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">21</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>)); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"7\">\n<li>isBeforeDate：检查是否在某日期前</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> isBeforeDate = <span class=\"hljs-function\">(<span class=\"hljs-params\">dateA, dateB</span>) =&gt;</span> dateA &lt; dateB;\n\nisBeforeDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">21</span>)); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"8\">\n<li>tomorrow：获取明天的字符串格式时间</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> tomorrow = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n  t.setDate(t.getDate() + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> t.toISOString().split(<span class=\"hljs-string\">'T'</span>)[<span class=\"hljs-number\">0</span>];\n};\n\ntomorrow(); <span class=\"hljs-comment\">// 2019-10-15 (如果明天是2019-10-15)</span>\n\n</code></pre>\n<ol start=\"9\">\n<li>equals：全等判断</li>\n</ol>\n<p>在两个变量之间进行深度比较以确定它们是否全等。</p>\n<p>此代码段精简的核心在于Array.prototype.every()的使用。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> equals = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (a === b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">if</span> (a <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Date</span> &amp;&amp; b <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Date</span>) <span class=\"hljs-keyword\">return</span> a.getTime() === b.getTime();\n  <span class=\"hljs-keyword\">if</span> (!a || !b || (<span class=\"hljs-keyword\">typeof</span> a !== <span class=\"hljs-string\">'object'</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> b !== <span class=\"hljs-string\">'object'</span>)) <span class=\"hljs-keyword\">return</span> a === b;\n  <span class=\"hljs-keyword\">if</span> (a.prototype !== b.prototype) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">let</span> keys = <span class=\"hljs-built_in\">Object</span>.keys(a);\n  <span class=\"hljs-keyword\">if</span> (keys.length !== <span class=\"hljs-built_in\">Object</span>.keys(b).length) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">return</span> keys.every(<span class=\"hljs-function\"><span class=\"hljs-params\">k</span> =&gt;</span> equals(a[k], b[k]));\n};\n\n</code></pre>\n<p>用法：</p>\n<pre><code class=\"language-js\">equals({ <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">2</span>, { <span class=\"hljs-attr\">e</span>: <span class=\"hljs-number\">3</span> }], <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">4</span>], <span class=\"hljs-attr\">c</span>: <span class=\"hljs-string\">'foo'</span> }, { <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">2</span>, { <span class=\"hljs-attr\">e</span>: <span class=\"hljs-number\">3</span> }], <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">4</span>], <span class=\"hljs-attr\">c</span>: <span class=\"hljs-string\">'foo'</span> }); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<h2>数字</h2>\n<ol>\n<li>randomIntegerInRange：生成指定范围的随机整数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> randomIntegerInRange = <span class=\"hljs-function\">(<span class=\"hljs-params\">min, max</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * (max - min + <span class=\"hljs-number\">1</span>)) + min;\n\nrandomIntegerInRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// 3</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>randomNumberInRange：生成指定范围的随机小数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> randomNumberInRange = <span class=\"hljs-function\">(<span class=\"hljs-params\">min, max</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.random() * (max - min) + min;\n\nrandomNumberInRange(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 6.0211363285087005</span>\n\n</code></pre>\n<ol start=\"3\">\n<li>round：四舍五入到指定位数</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> round = <span class=\"hljs-function\">(<span class=\"hljs-params\">n, decimals = <span class=\"hljs-number\">0</span></span>) =&gt;</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${n}</span>e<span class=\"hljs-subst\">${decimals}</span>`</span>)}</span>e-<span class=\"hljs-subst\">${decimals}</span>`</span>);\n\nround(<span class=\"hljs-number\">1.005</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 1.01</span>\n\n</code></pre>\n<ol start=\"4\">\n<li>sum：计算数组或多个数字的总和</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> sum = <span class=\"hljs-function\">(<span class=\"hljs-params\">...arr</span>) =&gt;</span> [...arr].reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val</span>) =&gt;</span> acc + val, <span class=\"hljs-number\">0</span>);\n\nsum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// 10</span>\nsum(...[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// 10</span>\n\n</code></pre>\n<ol start=\"5\">\n<li>toCurrency：简单的货币单位转换</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> toCurrency = <span class=\"hljs-function\">(<span class=\"hljs-params\">n, curr, LanguageFormat = <span class=\"hljs-literal\">undefined</span></span>) =&gt;</span>\n  <span class=\"hljs-built_in\">Intl</span>.NumberFormat(LanguageFormat, { <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">'currency'</span>, <span class=\"hljs-attr\">currency</span>: curr }).format(n);\n  \ntoCurrency(<span class=\"hljs-number\">123456.789</span>, <span class=\"hljs-string\">'EUR'</span>); <span class=\"hljs-comment\">// €123,456.79</span>\ntoCurrency(<span class=\"hljs-number\">123456.789</span>, <span class=\"hljs-string\">'USD'</span>, <span class=\"hljs-string\">'en-us'</span>); <span class=\"hljs-comment\">// $123,456.79  </span>\ntoCurrency(<span class=\"hljs-number\">123456.789</span>, <span class=\"hljs-string\">'USD'</span>, <span class=\"hljs-string\">'fa'</span>); <span class=\"hljs-comment\">// ۱۲۳٬۴۵۶٫۷۹</span>\ntoCurrency(<span class=\"hljs-number\">322342436423.2435</span>, <span class=\"hljs-string\">'JPY'</span>); <span class=\"hljs-comment\">// ¥322,342,436,423 </span>\n\n</code></pre>\n<h2>浏览器操作及其它</h2>\n<ol>\n<li>bottomVisible：检查页面底部是否可见</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> bottomVisible = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span>\n  <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight + <span class=\"hljs-built_in\">window</span>.scrollY &gt;=\n  (<span class=\"hljs-built_in\">document</span>.documentElement.scrollHeight || <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight);\n\nbottomVisible(); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"2\">\n<li>Create Directory：检查创建目录</li>\n</ol>\n<p>此代码段调用fs模块的existsSync()检查目录是否存在，如果不存在，则mkdirSync()创建该目录。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">const</span> createDirIfNotExists = <span class=\"hljs-function\"><span class=\"hljs-params\">dir</span> =&gt;</span> (!fs.existsSync(dir) ? fs.mkdirSync(dir) : <span class=\"hljs-literal\">undefined</span>);\ncreateDirIfNotExists(<span class=\"hljs-string\">'test'</span>); \n\n</code></pre>\n<ol start=\"3\">\n<li>currentURL：返回当前链接url</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> currentURL = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">window</span>.location.href;\n\ncurrentURL(); <span class=\"hljs-comment\">// 'https://juejin.im'</span>\n\n</code></pre>\n<ol start=\"4\">\n<li>distance：返回两点间的距离</li>\n</ol>\n<p>该代码段通过计算欧几里得距离来返回两点之间的距离。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> distance = <span class=\"hljs-function\">(<span class=\"hljs-params\">x0, y0, x1, y1</span>) =&gt;</span> <span class=\"hljs-built_in\">Math</span>.hypot(x1 - x0, y1 - y0);\n\ndistance(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 2.23606797749979</span>\n\n</code></pre>\n<ol start=\"5\">\n<li>elementContains：检查是否包含子元素\n此代码段检查父元素是否包含子元素。</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> elementContains = <span class=\"hljs-function\">(<span class=\"hljs-params\">parent, child</span>) =&gt;</span> parent !== child &amp;&amp; parent.contains(child);\n\nelementContains(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'head'</span>), <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'title'</span>)); <span class=\"hljs-comment\">// true</span>\nelementContains(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'body'</span>), <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'body'</span>)); <span class=\"hljs-comment\">// false</span>\n\n</code></pre>\n<ol start=\"6\">\n<li>getStyle：返回指定元素的生效样式</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> getStyle = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, ruleName</span>) =&gt;</span> getComputedStyle(el)[ruleName];\n\ngetStyle(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'p'</span>), <span class=\"hljs-string\">'font-size'</span>); <span class=\"hljs-comment\">// '16px'</span>\n\n</code></pre>\n<ol start=\"7\">\n<li>getType：返回值或变量的类型名</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> getType = <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span>\n  v === <span class=\"hljs-literal\">undefined</span> ? <span class=\"hljs-string\">'undefined'</span> : v === <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-string\">'null'</span> : v.constructor.name.toLowerCase();\n  \ngetType(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])); <span class=\"hljs-comment\">// 'set'</span>\ngetType([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// 'array'</span>\n\n</code></pre>\n<ol start=\"8\">\n<li>hasClass：校验指定元素的类名</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> hasClass = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, className</span>) =&gt;</span> el.classList.contains(className);\nhasClass(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'p.special'</span>), <span class=\"hljs-string\">'special'</span>); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"9\">\n<li>hide：隐藏所有的指定标签</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> hide = <span class=\"hljs-function\">(<span class=\"hljs-params\">...el</span>) =&gt;</span> [...el].forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> (e.style.display = <span class=\"hljs-string\">'none'</span>));\n\nhide(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'img'</span>)); <span class=\"hljs-comment\">// 隐藏所有&lt;img&gt;标签</span>\n\n</code></pre>\n<ol start=\"10\">\n<li>httpsRedirect：HTTP 跳转 HTTPS</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> httpsRedirect = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (location.protocol !== <span class=\"hljs-string\">'https:'</span>) location.replace(<span class=\"hljs-string\">'https://'</span> + location.href.split(<span class=\"hljs-string\">'//'</span>)[<span class=\"hljs-number\">1</span>]);\n};\n\nhttpsRedirect(); <span class=\"hljs-comment\">// 若在`http://www.baidu.com`, 则跳转到`https://www.baidu.com`</span>\n\n</code></pre>\n<ol start=\"11\">\n<li>insertAfter：在指定元素之后插入新元素</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> insertAfter = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, htmlString</span>) =&gt;</span> el.insertAdjacentHTML(<span class=\"hljs-string\">'afterend'</span>, htmlString);\n\n<span class=\"hljs-comment\">// &lt;div id=\"myId\"&gt;...&lt;/div&gt; &lt;p&gt;after&lt;/p&gt;</span>\ninsertAfter(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'myId'</span>), <span class=\"hljs-string\">'&lt;p&gt;after&lt;/p&gt;'</span>); \n\n</code></pre>\n<ol start=\"12\">\n<li>insertBefore：在指定元素之前插入新元素</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> insertBefore = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, htmlString</span>) =&gt;</span> el.insertAdjacentHTML(<span class=\"hljs-string\">'beforebegin'</span>, htmlString);\n\ninsertBefore(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'myId'</span>), <span class=\"hljs-string\">'&lt;p&gt;before&lt;/p&gt;'</span>); <span class=\"hljs-comment\">// &lt;p&gt;before&lt;/p&gt; &lt;div id=\"myId\"&gt;...&lt;/div&gt;</span>\n\n</code></pre>\n<ol start=\"13\">\n<li>isBrowser：检查是否为浏览器环境</li>\n</ol>\n<p>此代码段可用于确定当前运行时环境是否为浏览器。这有助于避免在服务器（节点）上运行前端模块时出错。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> isBrowser = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ![<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">window</span>, <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>].includes(<span class=\"hljs-string\">'undefined'</span>);\n\nisBrowser(); <span class=\"hljs-comment\">// true (browser)</span>\nisBrowser(); <span class=\"hljs-comment\">// false (Node)</span>\n\n</code></pre>\n<ol start=\"14\">\n<li>isBrowserTab：检查当前标签页是否活动</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> isBrowserTabFocused = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> !<span class=\"hljs-built_in\">document</span>.hidden;\n\nisBrowserTabFocused(); <span class=\"hljs-comment\">// true</span>\n\n</code></pre>\n<ol start=\"15\">\n<li>nodeListToArray：转换nodeList为数组</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> nodeListToArray = <span class=\"hljs-function\"><span class=\"hljs-params\">nodeList</span> =&gt;</span> [...nodeList];\n\nnodeListToArray(<span class=\"hljs-built_in\">document</span>.childNodes); <span class=\"hljs-comment\">// [ &lt;!DOCTYPE html&gt;, html ]</span>\n\n</code></pre>\n<ol start=\"16\">\n<li>Random Hexadecimal Color Code：随机十六进制颜色</li>\n</ol>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">const</span> randomHexColorCode = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> n = (<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">0xfffff</span> * <span class=\"hljs-number\">1000000</span>).toString(<span class=\"hljs-number\">16</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'#'</span> + n.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>);\n};\n\nrandomHexColorCode(); <span class=\"hljs-comment\">// \"#e34155\"</span>\n\n</code></pre>\n<ol start=\"17\">\n<li>scrollToTop：平滑滚动至顶部</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> scrollToTop = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop || <span class=\"hljs-built_in\">document</span>.body.scrollTop;\n  <span class=\"hljs-keyword\">if</span> (c &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(scrollToTop);\n    <span class=\"hljs-built_in\">window</span>.scrollTo(<span class=\"hljs-number\">0</span>, c - c / <span class=\"hljs-number\">8</span>);\n  }\n};\n\nscrollToTop();\n\n</code></pre>\n<ol start=\"18\">\n<li>smoothScroll：滚动到指定元素区域</li>\n</ol>\n<p>该代码段可将指定元素平滑滚动到浏览器窗口的可见区域。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> smoothScroll = <span class=\"hljs-function\"><span class=\"hljs-params\">element</span> =&gt;</span>\n  <span class=\"hljs-built_in\">document</span>.querySelector(element).scrollIntoView({\n    <span class=\"hljs-attr\">behavior</span>: <span class=\"hljs-string\">'smooth'</span>\n  });\n  \nsmoothScroll(<span class=\"hljs-string\">'#fooBar'</span>); \nsmoothScroll(<span class=\"hljs-string\">'.fooBar'</span>); \n\n</code></pre>\n<ol start=\"19\">\n<li>detectDeviceType：检测移动/PC设备</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> detectDeviceType = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span>\n  <span class=\"hljs-regexp\">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.test(navigator.userAgent)\n    ? <span class=\"hljs-string\">'Mobile'</span>\n    : <span class=\"hljs-string\">'Desktop'</span>;\n\n</code></pre>\n<ol start=\"20\">\n<li>getScrollPosition：返回当前的滚动位置</li>\n</ol>\n<p>默认参数为window ，pageXOffset(pageYOffset)为第一选择，没有则用scrollLeft(scrollTop)</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> getScrollPosition = <span class=\"hljs-function\">(<span class=\"hljs-params\">el = <span class=\"hljs-built_in\">window</span></span>) =&gt;</span> ({\n  <span class=\"hljs-attr\">x</span>: el.pageXOffset !== <span class=\"hljs-literal\">undefined</span> ? el.pageXOffset : el.scrollLeft,\n  <span class=\"hljs-attr\">y</span>: el.pageYOffset !== <span class=\"hljs-literal\">undefined</span> ? el.pageYOffset : el.scrollTop\n});\n\ngetScrollPosition(); <span class=\"hljs-comment\">// {x: 0, y: 200}</span>\n\n</code></pre>\n<ol start=\"21\">\n<li>size：获取不同类型变量的字节长度</li>\n</ol>\n<p>这个的实现非常巧妙，利用Blob类文件对象的特性，获取对象的长度。</p>\n<p>另外，多重三元运算符，是真香。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> size = <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span>\n  <span class=\"hljs-built_in\">Array</span>.isArray(val)\n    ? val.length\n    : val &amp;&amp; <span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">'object'</span>\n    ? val.size || val.length || <span class=\"hljs-built_in\">Object</span>.keys(val).length\n    : <span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">'string'</span>\n    ? <span class=\"hljs-keyword\">new</span> Blob([val]).size\n    : <span class=\"hljs-number\">0</span>;\n\nsize([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// 5</span>\nsize(<span class=\"hljs-string\">'size'</span>); <span class=\"hljs-comment\">// 4</span>\nsize({ <span class=\"hljs-attr\">one</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">two</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">three</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// 3</span>\n\n\n</code></pre>\n<ol start=\"22\">\n<li>escapeHTML：转义HTML</li>\n</ol>\n<p>当然是用来防XSS攻击啦。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> escapeHTML = <span class=\"hljs-function\"><span class=\"hljs-params\">str</span> =&gt;</span>\n  str.replace(\n    <span class=\"hljs-regexp\">/[&amp;&lt;&gt;'\"]/g</span>,\n    tag =&gt;\n      ({\n        <span class=\"hljs-string\">'&amp;'</span>: <span class=\"hljs-string\">'&amp;amp;'</span>,\n        <span class=\"hljs-string\">'&lt;'</span>: <span class=\"hljs-string\">'&amp;lt;'</span>,\n        <span class=\"hljs-string\">'&gt;'</span>: <span class=\"hljs-string\">'&amp;gt;'</span>,\n        <span class=\"hljs-string\">\"'\"</span>: <span class=\"hljs-string\">'&amp;#39;'</span>,\n        <span class=\"hljs-string\">'\"'</span>: <span class=\"hljs-string\">'&amp;quot;'</span>\n      }[tag] || tag)\n  );\n\nescapeHTML(<span class=\"hljs-string\">'&lt;a href=\"#\"&gt;Me &amp; you&lt;/a&gt;'</span>); <span class=\"hljs-comment\">// '&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;'</span>\n\n</code></pre>\n",
  "link": "\\zh-cn\\blog\\web\\js_tool_method.html",
  "meta": {}
}