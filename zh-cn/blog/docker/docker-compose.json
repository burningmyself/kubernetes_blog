{
  "filename": "docker-compose.md",
  "__html": "<h1>docker和docker-compose 配置 mysql mssql mongodb redis nginx jenkins 环境</h1>\n<h2>磁盘挂载</h2>\n<pre><code class=\"language-shell\">fdisk -l #查看磁盘列表\nmkfs.ext4 /dev/vdb #格式化磁盘\nmount /dev/vdb /data #挂载磁盘在/data\necho '/dev/vdb /data ext4 defaults,nofail 0 1'&gt;&gt; /etc/fstab # 启动服务器自动挂载\nmount -a #校验自动挂载脚本\ndf -h #查看磁盘挂载后信息\n</code></pre>\n<h2>docker</h2>\n<h3>安装 docker</h3>\n<pre><code class=\"language-shell\">yum update #更新系统包\nyum install -y yum-utils device-mapper-persistent-data lvm2 #安装yum-utils\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo #为yum源添加docker仓库位置\nyum install docker-ce #安装docker\nsystemctl enable docker #设置开机自动启动\nsystemctl start docker #启动docker\nsystemctl stop docker #暂停docker\nmv /var/lib/docker /data/docker # 修改Docker镜像的存放位置\nln -s /data/docker /var/lib/docker #建立软连接\necho '{\n  \"registry-mirrors\": [\n    \"https://dockerhub.azk8s.cn\",\n    \"https://hub-mirror.c.163.com\",\n    \"https://registry.docker-cn.com\"\n    ]\n}\n'&gt;&gt; /etc/docker/daemon.json # 镜像下载代理\n</code></pre>\n<h3>拉取 Java 镜像</h3>\n<pre><code class=\"language-shell\">docker pull java\n</code></pre>\n<h3>拉取SqlServer镜像</h3>\n<pre><code class=\"language-shell\">docker pull microsoft/mssql-server-linux # 拉取SqlServer镜像\ndocker run -p 1433:1433 --name mssql \\ # run 运行容器 -p 将容器的1433端口映射到主机的1433端口 --name 容器运行的名字\n--restart=always \\ # 挂断自动重新启动\n-v /data/sqlserver:/var/opt/mssql \\ # 挂载mssql文件夹到主机\n-e ACCEPT_EULA=Y \\ # 同意协议\n-e MSSQL_SA_PASSWORD=mssql-MSSQL \\ # 初始化sa密码\n-u root \\ # 指定容器为root运行\n-d microsoft/mssql-server-linux # -d 后台运行\n</code></pre>\n<h3>拉取 MySql 镜像</h3>\n<pre><code class=\"language-shell\">docker pull mysql #拉取 MySql\ndocker run -p 3306:3306 --name mysql \\ # run 运行容器 -p 将容器的3306端口映射到主机的3306端口 --name 容器运行的名字\n--restart=always \\ # 挂断自动重新启动\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /data/mysql/log:/var/log/mysql \\ # 将日志文件夹挂载到主机\n-v /data/mysql/data:/var/lib/mysql \\ # 将数据文件夹挂载到主机\n-v /data/mysql/mysql-files:/var/lib/mysql-files \\ # 将数据文件夹挂载到主机\n-v /data/mysql/conf:/etc/mysql \\ # 将配置文件夹挂在到主机\n-e MYSQL_ROOT_PASSWORD=xiujingmysql. \\ # 初始化root用户的密码\n-d mysql # -d 后台运行\ndocker exec -it mysql /bin/bash # 进入Docker容器内部的bash\n</code></pre>\n<h3>拉取 Mongodb 镜像</h3>\n<pre><code class=\"language-shell\">docker pull mongo #拉取 mongodb\ndocker run -p 27017:27017  --name mongo \\ # run 运行容器 -p 将容器的27017端口映射到主机的27017端口 --name 容器运行的名字 \n--restart=always \\ # 挂断自动重新启动\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /data/mongodb/db:/data/db \\ # 将数据文件夹挂载到主机\n-v /data/mongodb/configdb:/data/configdb \\ # 将数据库配置文件挂载到主机\n-v /data/mongodb/initdb:/docker-entrypoint-initdb.d # 通过/docker-entrypoint-initdb.d/将更复杂的用户设置显式留给用户 当容器首次启动时它会执行/docker-entrypoint-initdb.d 目录下的sh 和js脚本 。 以脚本字母顺序执行\n-e MONGO_INITDB_ROOT_USERNAME=admin \\ # 设置admin数据库账户名称 如果使用了此项，则不需要 --auth 参数\n-e MONGO_INITDB_ROOT_PASSWORD=admin  \\ # 设置admin数据库账户密码 如果使用了此项，则不需要 --auth 参数\n-d mongo \\ # -d 后台运行\n--auth # --auth 需要密码才能访问容器服务\n\ndocker exec -it mongo mongo admin # 进入mongo\ndb.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'}]}); #创建一个名为 admin，密码为 123456 的用户。\ndb.auth('admin', '123456') # 尝试使用上面创建的用户信息进行连接。\n</code></pre>\n<h3>拉取 Redis 镜像</h3>\n<pre><code class=\"language-shell\">docker pull redis #拉取 redis\ndocker run -p 6379:6379 --name redis \\ # run 运行容器 -p 将容器的6379端口映射到主机的6379端口 --name 容器运行的名字\n--restart=always \\ # 挂断自动重新启动\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /data/redis:/data \\ # 将数据文件夹挂载到主机\n-d redis \\ # -d 后台运行\nredis-server --appendonly yes \\ # 在容器执行redis-server启动命令，并打开redis持久化配置\n--requirepass \"123456\" # 设置密码123456\n</code></pre>\n<h3>拉取 Nginx 镜像</h3>\n<pre><code class=\"language-shell\">docker pull nginx #拉取 nginx\ndocker run -p 80:80 -p 443:443 --name nginx -d nginx # 运行容器\ndocker container cp nginx:/etc/nginx /data/nginx/ #拷贝容器配置\ndocker rm -f nginx # 删除容器\n</code></pre>\n<p>nginx 配置文件</p>\n<pre><code class=\"language-conf\">\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error_log.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '\n                      '$status $body_bytes_sent &quot;$http_referer&quot; '\n                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';\n\n    access_log   /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    gzip on; #开启gzip\n    gzip_disable &quot;msie6&quot;; #IE6不使用gzip\n    gzip_vary on; #设置为on会在Header里增加 &quot;Vary: Accept-Encoding&quot;\n    gzip_proxied any; #代理结果数据的压缩\n    gzip_comp_level 6; #gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值\n    gzip_buffers 16 8k; #获取多少内存用于缓存压缩结果\n    gzip_http_version 1.1; #识别http协议的版本\n    gzip_min_length 1k; #设置允许压缩的页面最小字节数，超过1k的文件会被压缩\n    gzip_types application/javascript text/css; #对特定的MIME类型生效,js和css文件会被压缩\n\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n      #nginx同时开启http和https\n    \tlisten 80 default backlog=2048;\n    \tlisten 443 ssl;\n    \tserver_name ysf.djtlpay.com;\n    \t\n    \tssl_certificate  /ssl/1_ysf.djtlpay.com_bundle.crt;\n    \tssl_certificate_key  /ssl/2_ysf.djtlpay.com.key;\n\t\n        location / {\n            root /usr/share/nginx/html;\n            index  index.html index.htm;\n        }\n   }\t\t\n}\n\n</code></pre>\n<p>运行 nginx</p>\n<pre><code class=\"language-shell\">docker run -p 80:80 -p 443:443 --name nginx \\ # run 运行容器 -p 将容器的80,443端口映射到主机的80,443端口 --name 容器运行的名字\n--restart=always \\ # 挂断自动重新启动\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /data/nginx/html:/usr/share/nginx/html \\ # nginx 静态资源\n-v /data/nginx/logs:/var/log/nginx  \\ # 将日志文件夹挂载到主机\n-v /data/nginx/conf:/etc/nginx \\ # 将配置文件夹挂在到主机\n-v /data/nginx/conf/ssl:/ssl \\ # 将证书文件夹挂在到主机\n-d nginx #\n</code></pre>\n<h3>拉取Jenkins镜像：</h3>\n<pre><code class=\"language-shell\">docker pull jenkins/jenkins:lts # 拉取 jenkins\ndocker run -p 8080:8080 -p 50000:50000 --name jenkins \\ # run 运行容器 -p 将容器的8080,50000端口映射到主机的8080,50000端口 --name 容器运行的名字\n--restart=always \\ # 挂断自动重新启动\n-u root \\ # 运行的用户为root\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /data/jenkins_home:/var/jenkins_home \\ # 将jenkins_home文件夹挂在到主机\n-e JAVA_OPTS=-Duser.timezone=Asia/Shanghai \\ #设置jenkins运行环境时区\n-d jenkins/jenkins:lts # -d 后台运行\n</code></pre>\n<h3>拉取MinIO镜像</h3>\n<pre><code class=\"language-shell\">docker pull minio/minio # 拉取MinIO镜像\ndocker run -p 9000:9000 --name minio \\ # run 运行容器 -p 将容器的9000,9000端口映射到主机的9000,9000端口 --name 容器运行的名\n--restart=always \\ # 挂断自动重新启动\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /data/minio/data:/data \\ # 将data文件夹挂在到主机\n-v /data/minio/config:/root/.minio \\ # 将配置文件夹挂在到主机\n-e \"MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\" \\ # 设置MINIO_ACCESS_KEY的值\n-e \"MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\ # 设置MINIO_SECRET_KEY值\n-d minio/minio server /data # -d 后台运行 server /data 导出/data目录\n\n</code></pre>\n<h3>拉取Portainer镜像</h3>\n<pre><code class=\"language-shell\">docker pull portainer/portainer # 拉取MinIO镜像\ndocker run -p 8001:8000 -p 9001:9000 --name portainer \\ # run 运行容器 -p 将容器的8000,9000端口映射到主机的8000,9000端口 --name 容器运行的名\n--restart=always \\ # 挂断自动重新启动\n-v /etc/localtime:/etc/localtime \\ # 将主机本地时间夹挂在到容器\n-v /var/run/docker.sock:/var/run/docker.sock \\ # 将docker.sock文件夹挂在到主机\n-v /data/portainer/data:/data \\ # 将配置文件夹挂在到主机\n-d portainer/portainer portainer # -d 后台运行\n</code></pre>\n<h3>Docker 开启远程API</h3>\n<ul>\n<li>用vi编辑器修改docker.service文件</li>\n</ul>\n<pre><code class=\"language-shell\">vi /usr/lib/systemd/system/docker.service\n<span class=\"hljs-meta\">#</span><span class=\"bash\">需要修改的部分：</span>\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n<span class=\"hljs-meta\">#</span><span class=\"bash\">修改后的部分：</span>\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n</code></pre>\n<h3>Docker 常用命令</h3>\n<pre><code class=\"language-shell\">systemctl start docker #启动docker\nsystemctl enable docker #将docker服务设为开机启动\nsystemctl stop docker #停止容器\nsystemctl restart docker #重启docker服务\ndocker images # 列出镜像\ndocker rmi --name # 删除镜像  -f 强制删除\ndocker ps # 列出容器 -a 所有\ndocker start --name # 启动容器\ndocker stop --name # 停止容器\ndocker restart --name # 重启docker容器\ndocker rm --name # 删除容器  -f 强制删除\ndocker stats -a # 查看所有容器情况\ndocker system df # 查看Docker磁盘使用情况\ndocker exec -it --name  /bin/bash #进入Docker容器内部的bash\ndocker cp 主机文件  容器名称:容器路径 #复制文件到docker容器中\ndocker logs --name #查看docker镜像日志\ndocker rm $(docker ps -a -q) # 删除所有容器 -f 强制删除\ndocker rmi $(docker images -a -q) # 删除所有镜像 -f 强制删除\ndocker rm -f `docker ps -a | grep -vE 'mysql|nginx|redis|jenkins' | awk '{print $1}'` # 删除mysql|nginx|redis|jenkins非容器 -f 强制删除\ndocker rmi -f `docker images | grep none | awk '{print $3}'` # 删除镜像none镜像 -f 强制删除\n</code></pre>\n<h2>docker-compose</h2>\n<h3>安装 docker-compose</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 下载Docker Compose</span>\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 修改该文件的权限为可执行</span>\nchmod +x /usr/local/bin/docker-compose\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看是否已经安装成功</span>\ndocker-compose --version\n</code></pre>\n<h3>使用Docker Compose的步骤</h3>\n<ul>\n<li>使用Dockerfile定义应用程序环境，一般需要修改初始镜像行为时才需要使用；</li>\n<li>使用docker-compose.yml定义需要部署的应用程序服务，以便执行脚本一次性部署；</li>\n<li>使用docker-compose up命令将所有应用服务一次性部署起来。</li>\n</ul>\n<h3>docker-compose.yml常用命令</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 指定运行的镜像名称</span>\nimage: name:version\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 配置容器名称</span>\ncontainer_name: name\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 指定宿主机和容器的端口映射</span>\nports:\n  - 3306:3306\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 将宿主机的文件或目录挂载到容器中</span>\nvolumes:\n  - /etc/localtime:/etc/localtime\n  - /data/mysql/log:/var/log/mysql\n  - /data/mysql/data:/var/lib/mysql\n  - /data/mysql/conf:/etc/mysql\n  - /data/mysql/mysql-files:/var/lib/mysql-files\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 配置环境变量</span>\nenvironment:\n  - MYSQL_ROOT_PASSWORD=xiujingmysql.\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 连接其他容器的服务</span>\nlinks:\n  - db:database #可以以database为域名访问服务名称为db的容器\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 挂断自动重新启动</span>\nrestart: always\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 指定容器执行命令</span>\ncommand: redis-server --requirepass xiujingredis.\n</code></pre>\n<h3>Docker Compose常用命令</h3>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 构建、创建、启动相关容器</span>\ndocker-compose up -d # -d表示在后台运行\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 停止所有相关容器</span>\ndocker-compose stop\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除容器文件</span>\ndocker-compose rm -f # -f 强制删除\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 重启容器</span>\ndocker-compose restart\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 列出所有容器信息</span>\ndocker-compose ps\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看容器日志</span>\ndocker-compose logs\n</code></pre>\n<h3>使用Docker Compose 部署应用</h3>\n<p>编写docker-compose.yml文件</p>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">'3'</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  nginx:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">nginx</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">80</span><span class=\"hljs-string\">:80</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">443</span><span class=\"hljs-string\">:443</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-comment\"># 指定容器的环境变量</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">TZ=Asia/Shanghai</span> <span class=\"hljs-comment\"># 设置容器时区与宿主机保持一致</span>\n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  sqlserver:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">mcr.microsoft.com/mssql/server</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">sqlserver</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"1433\"</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件  </span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/sqlserver:/var/opt/mssql</span>\n    <span class=\"hljs-comment\"># 挂断自动重新启动  </span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">TZ=Asia/Shanghai</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SA_PASSWORD=mssql-MSSQL</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">ACCEPT_EULA=Y</span> \n    <span class=\"hljs-comment\"># 指定容器运行的用户为root</span>\n<span class=\"hljs-attr\">    user:</span>\n      <span class=\"hljs-string\">root</span>       \n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  mysql:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">mysql</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">mysql</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">3306</span><span class=\"hljs-string\">:3306</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mysql/log:/var/log/mysql</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mysql/data:/var/lib/mysql</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mysql/mysql-files:/var/lib/mysql-files</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mysql/conf:/etc/mysql</span>\n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-comment\"># 指定容器的环境变量</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">TZ=Asia/Shanghai</span> <span class=\"hljs-comment\"># 设置容器时区与宿主机保持一致</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">MYSQL_ROOT_PASSWORD=xiujingmysql.</span> <span class=\"hljs-comment\"># 设置root密码</span>\n    <span class=\"hljs-comment\"># 指定容器运行的用户为root</span>\n<span class=\"hljs-attr\">    user:</span>\n      <span class=\"hljs-string\">root</span>     \n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  redis:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">redis</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">redis</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">6379</span><span class=\"hljs-string\">:6379</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/redis:/data</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/redis/redis.conf:/etc/redis.conf</span>\n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-comment\"># 指定容器执行命令</span>\n<span class=\"hljs-attr\">    command:</span> <span class=\"hljs-string\">redis-server</span> <span class=\"hljs-string\">/etc/redis.conf</span> <span class=\"hljs-bullet\">--requirepass</span> <span class=\"hljs-string\">xiujingredis.</span> <span class=\"hljs-bullet\">--appendonly</span> <span class=\"hljs-literal\">yes</span>\n    <span class=\"hljs-comment\"># 指定容器的环境变量</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">TZ=Asia/Shanghai</span> <span class=\"hljs-comment\"># 设置容器时区与宿主机保持一致</span>\n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  mongo:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">mongo</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">mongo</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">27017</span><span class=\"hljs-string\">:27017</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mongodb/db:/data/db</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mongodb/configdb:/data/configdb</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/mongodb/initdb:/docker-entrypoint-initdb.d</span>      \n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-comment\"># 指定容器的环境变量</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">TZ=Asia/Shanghai</span> <span class=\"hljs-comment\"># 设置容器时区与宿主机保持一致</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">AUTH=yes</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">MONGO_INITDB_ROOT_USERNAME=admin</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">MONGO_INITDB_ROOT_PASSWORD=admin</span>\n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  jenkins:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">jenkins</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">jenkins</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">8080</span><span class=\"hljs-string\">:8080</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">50000</span><span class=\"hljs-string\">:50000</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/jenkins_home:/var/jenkins_home</span> \n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-comment\"># 指定容器的环境变量</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">TZ=Asia/Shanghai</span> <span class=\"hljs-comment\"># 设置容器时区与宿主机保持一致</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">JAVA_OPTS=-Duser.timezone=Asia/Shanghai</span>   \n    <span class=\"hljs-comment\"># 指定容器运行的用户为root</span>\n<span class=\"hljs-attr\">    user:</span>\n      <span class=\"hljs-string\">root</span>    \n  <span class=\"hljs-comment\"># 指定服务名称</span>\n<span class=\"hljs-attr\">  minio:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">minio</span>\n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">minio</span>\n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">9000</span><span class=\"hljs-string\">:9000</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/minio/data:/data</span> \n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/minio/config:/root/.minio</span>\n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>   \n    <span class=\"hljs-comment\"># 指定容器执行命令</span>\n<span class=\"hljs-attr\">    command:</span> <span class=\"hljs-string\">server</span> <span class=\"hljs-string\">/data</span>    \n  <span class=\"hljs-comment\"># 指定服务名称   </span>\n  <span class=\"hljs-string\">portainer</span> <span class=\"hljs-string\">:</span>\n    <span class=\"hljs-comment\"># 指定服务使用的镜像</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">portainer</span> \n    <span class=\"hljs-comment\"># 指定容器名称</span>\n<span class=\"hljs-attr\">    container_name:</span> <span class=\"hljs-string\">portainer</span> \n    <span class=\"hljs-comment\"># 指定服务运行的端口</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">8001</span><span class=\"hljs-string\">:8000</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-number\">9001</span><span class=\"hljs-string\">:9000</span>\n    <span class=\"hljs-comment\"># 指定容器中需要挂载的文件</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/var/run/docker.sock:/var/run/docker.sock</span> \n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">/data/portainer/data:/data</span>\n    <span class=\"hljs-comment\"># 挂断自动重新启动</span>\n<span class=\"hljs-attr\">    restart:</span> <span class=\"hljs-string\">always</span>  \n</code></pre>\n<p>运行Docker Compose命令启动所有服务</p>\n<pre><code class=\"language-shell\">docker-compose up -d\n</code></pre>\n",
  "link": "\\zh-cn\\blog\\docker\\docker-compose.html",
  "meta": {}
}