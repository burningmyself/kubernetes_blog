{
  "filename": "c_mysql_nginx.md",
  "__html": "<h1><a href=\"http://ASP.NET\">ASP.NET</a> Core 实战：使用 Docker 容器化部署 <a href=\"http://ASP.NET\">ASP.NET</a> Core + MySQL + Nginx</h1>\n<h3>一、前言</h3>\n<p>在之前的文章（<a href=\"http://ASP.NET\">ASP.NET</a> Core 实战：Linux 小白的 .NET Core 部署之路）中，我介绍了如何在 Linux 环境中安装 .NET Core SDK / .NET Core Runtime、Nginx、MySQL，以及如何将我们的 <a href=\"http://ASP.NET\">ASP.NET</a> Core MVC 程序部署到 Linux 上，同时，使用 supervisor  守护程序守护我们的 .NET Core 程序。如果，你有看过那篇文章，并且和我一样是个 Linux 小白用户的话，可能第一感觉就是，把 .NET Core 项目部署在 IIS 上也挺好。</p>\n<p>将 .NET Core 项目部署到 Linux 上如此复杂，就没有简单的部署方式吗？</p>\n<p>你好，有的，Docker 了解一下~~~</p>\n<p>PS：这里的示例代码还是采用之前的毕业设计项目，在这篇文章发布的时候，我已经在程序的仓库中添加了对于 Docker 的支持，你可以下载下来，自己尝试一下，毕竟，实践出真知。</p>\n<p>代码仓储：<a href=\"https://github.com/Lanesra712/Danvic.PSU\">https://github.com/Lanesra712/Danvic.PSU</a></p>\n<h3>二、Step by Step</h3>\n<h4>1、安装 Docker &amp; Docker Compose</h4>\n<p>在代码交付的过程中，偶尔会遇到这样的问题，在本地测试是好的，但是部署到测试环境、生产环境时就出这样那样的问题，同时，因为本地与测试环境、生产环境之间存在差异，我们可能无法在本地复现这些问题，那么，有没有一种工具可以很好的解决这一问题呢？随着历史的车轮不断前行，容器技术诞生了。</p>\n<p>Docker，作为最近几年兴起的一种虚拟化容器技术，他可以将我们的运行程序与操作系统做一个隔离，例如这里我们需要运行 .NET Core 程序，我们不再需要关心底层的操作系统是什么，不需要在每台需要需要运行程序的机器上安装程序运行的各种依赖，我们可以通过程序打包成镜像的方式，将应用程序和该程序的依赖全部置于一个镜像文件中，这时，只要别的机器上有安装 Docker，就可以通过我们打包的这个镜像来运行这个程序。</p>\n<h4>1.1、卸载 Docker</h4>\n<p>在安装 Docker 之前，我们应该确定当前的机器上是否已经安装好了 Docker，为了防止与现在安装的 Docker CE 发生冲突，这里我们先卸载掉以前版本的 Docker，如果你确定你的机器上并没有安装 Docker 的话此步可以跳过。</p>\n<p>在 Linux 中可以使用 \\ 加 Enter 在输入很长很长的语句时进行换行，这里和后面的命令都是采用这样的方式。</p>\n<p>sudo yum remove docker <br>\ndocker-client <br>\ndocker-client-latest <br>\ndocker-common <br>\ndocker-latest <br>\ndocker-latest-logrotate <br>\ndocker-logrotate <br>\ndocker-engine</p>\n<h4>1.2、添加 yum 源</h4>\n<p>在安装 Docker CE 的方式上，我是采用将 Docker CE 的源添加到 yum 源中，之后我们就可以直接使用 yum install 安装 Docker CE，整个的安装过程如下。</p>\n<p>安装工具包从而可以让我们在 yum 中添加别的仓储源</p>\n<pre><code>sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n</code></pre>\n<p>设置 docker ce 的稳定库地址</p>\n<pre><code>sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>\n<p>安装 docker ce</p>\n<pre><code>sudo yum install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<p>当我们安装好 Docker 之后，我们就可以使用 docker 命令验证我们是否在机器上成功安装了 Docker，同时，也可以使用 docker --version 命令查看我们安装的 Docker CE 版本。</p>\n<p><img src=\"./../img/c_mysql_nginx1.png\" alt=\"cmn\"></p>\n<h4>1.3、设置开机自启</h4>\n<p>当 Docker 已经在我们的机器上安装完成后，我们就可以将 Docker 设置成机器的自启服务，这样，如果出现服务器重启的情况下，我们的 Docker 也可以随服务器的重启自动启动 Docker 服务。</p>\n<p>启动 Docker 服务并允许开机自启</p>\n<pre><code>sudo systemctl start docker\n</code></pre>\n<p>查看当前 dokcer 的运行情况</p>\n<pre><code>sudo systemctl status docker\n</code></pre>\n<h4>1.4、Hello World</h4>\n<p>就像我们在学习一门新的语言时，运行的第一句代码，几乎都是打印出 Hello World，而在 Docker Hub 中，也有这么一个镜像，在无数的 Docker 教程中，安装完 Docker 后，第一件事就是拉取这个镜像文件，“告诉” Docker，我来了。</p>\n<p>Docker Hub 是存放镜像的仓库，里面包含了许多的镜像文件，因为服务器在国外的原因，下载的速度可能不理想，像国内的阿里云、腾讯云也有提供对于 Docker 镜像的加速器服务，你可以按需使用，当然，你也可以创建属于你的私有镜像仓库。</p>\n<p>docker run 命令，它会在我们的本地镜像库中先寻找这个镜像，然后运行。如果在本地没有找到的话，则会自动使用 docker pull 从 Docker Hub 中寻找，能找到的话，则会自动下载到本地，然后运行，找不到的话，这条命令也就运行失败了。</p>\n<p><img src=\"./../img/c_mysql_nginx2.png\" alt=\"cmn\"></p>\n<h4>1.5、安装 Docker Compose</h4>\n<p>在实际的项目开发中，我们可能会有多个应用镜像，例如在本篇文章的示例中，为了在 Docker 中运行我们的程序，我们需要三个镜像：应用程序自身镜像、MySQL Server 镜像、以及 Nginx 镜像，为了将我们的程序启动起来，我们需要手敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，又多又烦，可能某一步操作失败后程序就无法正常运行。而当我们使用了 Docker Compose 之后，我们就可以把这些命令一次性写在 docker-compose.yml 配置文件中，以后每次启动我们的应用程序时，只需要通过 docker compose 命令就可以自动帮我们完成这些操作。</p>\n<p>从 github 下载 docker compose 二进制文件</p>\n<pre><code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n</code></pre>\n<p>对下载的二进制文件应用可执行权限</p>\n<pre><code>sudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<p>查看 docker compose 版本</p>\n<pre><code>docker-compose --version\n</code></pre>\n<p><img src=\"./../img/c_mysql_nginx3.png\" alt=\"cmn\"></p>\n<h4>2、构建程序镜像</h4>\n<p>当我们在服务器上安装好 docker 和 docker compose 之后，就可以开始构建我们的程序镜像了。首先我们需要对我们的运行程序添加对于 Docker 的支持。你可以自己手动在 MVC 项目中添加 Dockerfile 文件，或是通过右键添加 Docker 支持。</p>\n<p><img src=\"./../img/c_mysql_nginx4.png\" alt=\"cmn\"></p>\n<p>Dockerfile 就像一个执行的清单，它告诉 Docker，我们这个镜像在构建和运行时需要按照什么样的命令运行。打开 VS 为我们自动创建的 Dockerfile，可以看到清晰的分成了四块的内容。</p>\n<p><img src=\"./../img/c_mysql_nginx5.png\" alt=\"cmn\"></p>\n<p>我们知道，.NET Core 程序的运行需要依赖于 .NET Core Runtime（CoreCLR），因此，为了使我们的程序可以运行起来，我们需要从 hub 中拉取 runtime ，并在 此基础上构建我们的应用镜像。同时，为了避免因为基础的环境的不同造成对程序的影响，这里的 Runtime 需要同程序开发时的 .NET Core SDK 版本保持一致，所以这里我使用的是 .NET Core 2.1 Runtime。</p>\n<p>一个镜像中包含了应用程序及其所有的依赖，与虚拟机不同的是，容器中的每个镜像最终是共享了宿主机的操作系统资源，容器作为用户空间中的独立进程运行在主机操作系统上。\n<img src=\"./../img/c_mysql_nginx6.png\" alt=\"cmn\"></p>\n<p>PS:图片版权归属于微软的技术文档，如有侵权，请联系我删除，源文件地址：什么是 Docker？</p>\n<p>镜像可以看成一个个小型的“虚拟主机”，这里我们在镜像中创建了一个 /app 路径作为我们程序在镜像中的工作目录，同时，将 80 端口暴露给 Docker，从而可以使我们在镜像外面通过端口访问到当前镜像中的运行的程序。</p>\n<pre><code>FROM microsoft/dotnet:2.1-aspnetcore-runtime AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\n</code></pre>\n<p>因为我们的应用是一个多层架构的单体应用，最终的 MVC 项目依赖于解决方案中的各个类库以及我们从 Nuget 中下载的各种第三方组件，在部署时，需要将这些组件打包成 dll 引用。所以，这里我们需要使用 .NET Core SDK 中包含的 .NET Core CLI 进行还原和构建。</p>\n<p>就像在下面的代码中，我们在镜像的内部创建了一个 /src 的路径，将当前解决方案下的类库都复制到这个目录下，之后通过 dotnet restore 命令还原我们的主程序所依赖的各个组件。当我们还原好依赖的组件后，就可以使用 dotnet build 命令生成 Release版本的 dll 文件，同时输出到之前创建的 /app 路径下。</p>\n<pre><code>FROM microsoft/dotnet:2.1-sdk AS build\nWORKDIR /src\nCOPY [&quot;PSU.Site/PSU.Site.csproj&quot;, &quot;PSU.Site/&quot;]\nCOPY [&quot;03_Logic/PSU.Domain/PSU.Domain.csproj&quot;, &quot;03_Logic/PSU.Domain/&quot;]\nCOPY [&quot;03_Logic/PSU.Repository/PSU.Repository.csproj&quot;, &quot;03_Logic/PSU.Repository/&quot;]\nCOPY [&quot;01_Entity/PSU.Entity/PSU.Entity.csproj&quot;, &quot;01_Entity/PSU.Entity/&quot;]\nCOPY [&quot;02_Infrastructure/PSU.Utility/PSU.Utility.csproj&quot;, &quot;02_Infrastructure/PSU.Utility/&quot;]\nCOPY [&quot;04_Rule/PSU.Model/PSU.Model.csproj&quot;, &quot;04_Rule/PSU.Model/&quot;]\nCOPY [&quot;02_Infrastructure/PSU.EFCore/PSU.EFCore.csproj&quot;, &quot;02_Infrastructure/PSU.EFCore/&quot;]\nCOPY [&quot;04_Rule/PSU.IService/PSU.IService.csproj&quot;, &quot;04_Rule/PSU.IService/&quot;]\nCOPY [&quot;Controllers.PSU/Controllers.PSU.csproj&quot;, &quot;Controllers.PSU/&quot;]\nRUN dotnet restore &quot;PSU.Site/PSU.Site.csproj&quot;\nCOPY . .\nWORKDIR &quot;/src/PSU.Site&quot;\nRUN dotnet build &quot;PSU.Site.csproj&quot; -c Release -o /app\n</code></pre>\n<p>上面一步可以看成我们在使用 VS 生成 Release 版本的解决方案，当生成没有出错之后，我们就可以进行程序的发布。</p>\n<pre><code>FROM build AS publish\nRUN dotnet publish &quot;PSU.Site.csproj&quot; -c Release -o /app\n</code></pre>\n<p>当已经生成发布文件之后，按照我们平时部署在 Windows 上的过程，这时就可以通过 IIS 部署运行了，因此，构建我们应用镜像的最后一步就是通过 dotnet 命令执行我们的程序。</p>\n<pre><code>FROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [&quot;dotnet&quot;, &quot;PSU.Site.dll&quot;]\n</code></pre>\n<p>似乎到这一步构建程序镜像就结束了，按照这样流程做的话，就需要我们将整个的解决方案上传到服务器上了，可是，很多时候，我们仅仅是把我们在本地发布好的项目上传到服务器上，这与我们现在的构建流程具有很大的不同，所以这里我们来修改 Dockerfile 文件，从而符合我们的发布流程。</p>\n<p>从上面分析 Dockerfile 的过程中不难看出，在服务器上构建镜像的第二步、第三步就是我们现在在开发环境中手动完成的部分，所以这里，我们只需要对这部分进行删除即可，修改后的 Dockerfile 如下。</p>\n<pre><code>FROM microsoft/dotnet:2.1-aspnetcore-runtime\nWORKDIR /app\nCOPY . /app \nEXPOSE 80\nENTRYPOINT [&quot;dotnet&quot;,&quot;PSU.Site.dll&quot;]\n</code></pre>\n<p>在修改后的 Dockerfile 中，可以看到，我们删去了 build 和 release 的过程，选择直接将我们 Dockerfile 路径下的文件拷贝到镜像中的 /app 路径下，然后直接执行 dotnet 命令，运行我们的程序。</p>\n<p>为了确保 Dockerfile 与发布后的文件处于同一路径下，这里我们需要使用 VS 修改 Dockerfile 的属性值，确保会复制到输出的目录下，这里选择如果较新则复制即可。</p>\n<p><img src=\"./../img/c_mysql_nginx7.png\" alt=\"cmn\"></p>\n<h4>3、编写 docker-compose.yml</h4>\n<p>当我们构建好应用的镜像，对于 Nginx 和 MySQL 我们完全可以从 hub 中拉取下来，再执行一些配置即可。所以，我们现在就可以编写 docker compose 文件，来定义我们的应用镜像运行时需要包含的依赖以及每个镜像的启动顺序。</p>\n<p>右键选中 MVC 项目，添加一个 docker-compose.yml 文件，同样的，需要修改该文件的属性，以便于该文件可以复制到输出目录下。注意，这里的文件名和上文的 Dockerfile 都是特定的，你不能做任何的修改。如果你的电脑上已经安装了 Docker for Windows，你也可以使用 VS，右键添加，选中容器业务流程协调程序支持自动对 docker compose 进行配置。</p>\n<p><img src=\"./../img/c_mysql_nginx8.png\" alt=\"cmn\"></p>\n<p>在 yml 文件中，我定义了三个镜像：psu.site、docker.mysql、docker.nginx。三个镜像的定义中有许多相同的地方，都设置了自动重启（restart），以及都处于同一个桥接网络下（psu-net）从而达到镜像间的通信。</p>\n<p><img src=\"./../img/c_mysql_nginx9.png\" alt=\"cmn\"></p>\n<p>docker.mysql 是 MySQL 的镜像，我们通过环境变量 MYSQL_ROOT_PASSWORD 设置了 MySQL 的数据库连接密码，并通过挂载卷的方式将镜像中的数据库文件持久化到我们的服务器本地路径中。同时，将镜像的 3306 端口映射到服务器的 3306 端口上。</p>\n<p>psu.site 则是我们的程序镜像，采用位于 /usr/wwwroot/psu/ 路径下的 Dockerfile 文件进行构建的，因为主程序的运行需要依赖于数据库，所以这里采用 depends_on 属性，使我们的应用镜像依赖于 docker.mysql 镜像，即，在 docker.mysql 启动后才会启动应用镜像。</p>\n<p>docker.nginx 则是我们的 nginx 镜像，这里将镜像中的 80 端口和 443 端口都映射到服务器 IP 上，因为我们需要配置 Nginx 从而监听我们的程序，所以通过挂载卷的方式，将本地的 nginx.conf 配置文件用配置映射到镜像中。同时，因为我们在构建应用镜像的 Dockerfile 文件时，对外暴露了 80 端口，所以这里就可以通过 links 属性进行监听（如果构建时未暴露端口，你可以在 docker compose 文件中通过 Expose 属性暴露镜像中的端口）。</p>\n<p>Nginx 的配置文件如下，这里特别需要注意文件的格式，缩进，一点小错误都可能导致镜像无法正常运行。如果你和我一样将 nginx.conf 放到程序运行路径下的，别忘了修改文件的属性。</p>\n<pre><code>server {\n    listen 80;\n\t\n    location / {\n      proxy_pass http://psu.site;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Host $http_host;\n      proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre>\n<p>一个完整的 docker compose 文件如下，包含了三个镜像以及一个桥接网络。</p>\n<pre><code>version: '3.7'\n\nservices:\n  docker.mysql:\n    image: mysql\n    ports:\n      - &quot;3306:3306&quot;\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=123456@sql\n    volumes:\n      - /usr/mysql:/var/lib/mysql\n    networks:\n      - psu-net\n\n  psu.site:\n    build: /usr/wwwroot/psu/\n    restart: always\n    depends_on:\n      - docker.mysql\n    networks:\n      - psu-net\n\n  docker.nginx:\n    image: nginx\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n    links:\n      - psu.site\n    networks:\n      - psu-net\n\nnetworks:\n  psu-net:\n    driver: bridge\n</code></pre>\n<p>这里需要注意，所有有用到镜像间的通信的地方，我们都需要使用镜像名进行指代，例如上面的 nginx 的配置文件中，我们需要将监听的地址改为镜像名称，以及，我们需要修改程序的数据库访问字符串的服务器地址，修改后的数据库连接字符串如下所示。</p>\n<pre><code>&quot;ConnectionStrings&quot;: {\n    &quot;SQLConnection&quot;: &quot;server=docker.mysql;database=PSU.Site;user=root;password=123456@sql;port=3306;persistsecurityinfo=True;&quot;\n  }\n</code></pre>\n<h4>4、发布部署程序</h4>\n<p>当我们构建好 docker compose 文件后就可以把整个文件上传到服务器上进行构建 docker 镜像了。这里我将所有的部署文件放在服务器的 /usr/wwwroot/psu/ 路径下，这时我们就可以通过 docker compose 命令进行镜像构建。</p>\n<p>定位到部署文件在的位置，我们可以直接使用下面的命令进行镜像的（重新）构建，启动，并链接一个服务相关的容器，整个过程都会在后台运行，如果你希望看到整个过程的话，你可以去掉 -d 参数。</p>\n<p>执行镜像构建，启动</p>\n<pre><code>docker-compose up -d\n</code></pre>\n<p>当 up 命令执行完成后，我们就可以通过 ps 命令查看正在运行的容器，若有的容器并没有运行起来，则可以使用 logs 查看容器的运行日志从而进行排错。</p>\n<p>查看所有正在运行的容器</p>\n<pre><code>docker-compose ps\n</code></pre>\n<p>显示容器运行日志</p>\n<pre><code>docker-compose logs\n</code></pre>\n<h3>三、总结</h3>\n<p>本章主要是介绍了如何通过 docker 容器，完整的部署一个可实际使用的 .NET Core 的单体应用，相比于之前通过 Linux 部署 .NET Core 应用，可以看到整个步骤少了很多，也简单很多。文中涉及到了一些 docker 的命令，如果你之前并没有接触过 docker 的话，可能需要你进一步的了解。当我们将程序打包成一个镜像之后，你完全可以将镜像上传到私有镜像仓库中，或是直接打包成镜像的压缩文件，这样，当需要切换部署环境时，只需要获取到这个镜像之后即可快速完成部署，相比之前，极大的方便了我们的工作。</p>\n",
  "link": "\\zh-cn\\blog\\net\\c_mysql_nginx.html",
  "meta": {}
}