{
  "filename": "c_sharp.md",
  "__html": "<h1>一小时学会C# 6</h1>\n<h2>一、字符串插值 （String Interpolation）</h2>\n<p>C# 6之前我们拼接字符串时需要这样</p>\n<pre><code class=\"language-C#\"> <span class=\"hljs-keyword\">var</span> Name = <span class=\"hljs-string\">\"Jack\"</span>;\n <span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-string\">\"Hello\"</span> + Name;\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-C#\"> <span class=\"hljs-keyword\">var</span> Name = <span class=\"hljs-string\">\"Jack\"</span>;\n <span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-keyword\">string</span>.Format(<span class=\"hljs-string\">\"Hello {0}\"</span>, Name);\n</code></pre>\n<p>但是C#6里我们就可以使用新的字符串插值特性</p>\n<pre><code class=\"language-C#\">  <span class=\"hljs-keyword\">var</span> Name = <span class=\"hljs-string\">\"Jack\"</span>;\n  <span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-string\">$\"Hello <span class=\"hljs-subst\">{Name}</span>\"</span>;\n</code></pre>\n<p>上面只是一个简单的例子，想想如果有多个值要替换的话，用C#6的这个新特性，代码就会大大减小，而且可读性比起之前大大增强</p>\n<pre><code class=\"language-C#\"> Person p = <span class=\"hljs-keyword\">new</span> Person {FirstName = <span class=\"hljs-string\">\"Jack\"</span>, LastName = <span class=\"hljs-string\">\"Wang\"</span>, Age = <span class=\"hljs-number\">100</span>};\n <span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-keyword\">string</span>.Format(<span class=\"hljs-string\">\"First Name: {0} LastName: {1} Age: { 2} \"</span>, p.FirstName, p.LastName, p.Age);\n</code></pre>\n<p>有了字符串插值后:</p>\n<pre><code class=\"language-C#\"> <span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-string\">$\"First Name: <span class=\"hljs-subst\">{p.FirstName}</span> LastName: <span class=\"hljs-subst\">{p.LastName}</span> Age: <span class=\"hljs-subst\">{p.Age}</span>\"</span>;\n</code></pre>\n<p>字符串插值不光是可以插简单的字符串，还可以直接插入代码</p>\n<pre><code class=\"language-C#\">Console.WriteLine(<span class=\"hljs-string\">$\"Jack is saying <span class=\"hljs-subst\">{ new Tools().SayHello() }</span>\"</span>);\n\n<span class=\"hljs-keyword\">var</span> info = <span class=\"hljs-string\">$\"Your discount is <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">await</span> GetDiscount()}</span>\"</span>;\n</code></pre>\n<p>那么如何处理多语言呢？我们可以使用 IFormattable下面的代码如何实现多语言？</p>\n<pre><code class=\"language-C#\"> Double remain = <span class=\"hljs-number\">2000.5</span>; \n <span class=\"hljs-keyword\">var</span> results= <span class=\"hljs-string\">$\"your money is <span class=\"hljs-subst\">{remain:C}</span>\"</span>;  \n</code></pre>\n<p>输出 your money is $2,000.50</p>\n<p>使用IFormattable 多语言</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Program</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n    {\n\n        Double remain = <span class=\"hljs-number\">2000.5</span>; \n\n       <span class=\"hljs-keyword\">var</span> results= ChineseText(<span class=\"hljs-string\">$\"your money is <span class=\"hljs-subst\">{remain:C}</span>\"</span>);\n\n        Console.WriteLine(results);\n        Console.Read();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">string</span> <span class=\"hljs-title\">ChineseText</span>(<span class=\"hljs-params\">IFormattable formattable</span>)</span>\n    {\n        <span class=\"hljs-keyword\">return</span> formattable.ToString(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">new</span> CultureInfo(<span class=\"hljs-string\">\"zh-cn\"</span>));\n    }\n}\n</code></pre>\n<p>输出  your money is ￥2,000.50</p>\n<h2>二、空操作符 ( ?. )</h2>\n<p>C# 6添加了一个 ?. 操作符，当一个对象或者属性职为空时直接返回null, 就不再继续执行后面的代码，在之前我们的代码里经常出现 NullException, 所以我们就需要加很多Null的判断，比如</p>\n<pre><code class=\"language-C#\"> <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span> &amp;&amp; user.Project != <span class=\"hljs-literal\">null</span> &amp;&amp; user.Project.Tasks != <span class=\"hljs-literal\">null</span> &amp;&amp; user.Project.Tasks.Count &gt; <span class=\"hljs-number\">0</span>)\n {\n   Console.WriteLine(user.Project.Tasks.First().Name);\n }\n</code></pre>\n<p>现在我们可以不用写 IF 直接写成如下这样</p>\n<pre><code class=\"language-C#\">Console.WriteLine(user?.Project?.Tasks?.First()?.Name);\n</code></pre>\n<p>这个?. 特性不光是可以用于取值，也可以用于方法调用，如果对象为空将不进行任何操作，下面的代码不会报错，也不会有任何输出。</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Program</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n    {\n        User user = <span class=\"hljs-literal\">null</span>;\n        user?.SayHello();\n        Console.Read();\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SayHello</span>(<span class=\"hljs-params\"></span>)</span>\n    {\n        Console.WriteLine(<span class=\"hljs-string\">\"Ha Ha\"</span>);\n    }\n}\n</code></pre>\n<p>还可以用于数组的索引器</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Program</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n    {\n        User[] users = <span class=\"hljs-literal\">null</span>;\n\n        List&lt;User&gt; listUsers = <span class=\"hljs-literal\">null</span>;\n\n        <span class=\"hljs-comment\">// Console.WriteLine(users[1]?.Name); // 报错</span>\n        <span class=\"hljs-comment\">// Console.WriteLine(listUsers[1]?.Name); //报错</span>\n\n        Console.WriteLine(users?[<span class=\"hljs-number\">1</span>].Name); <span class=\"hljs-comment\">// 正常</span>\n        Console.WriteLine(listUsers?[<span class=\"hljs-number\">1</span>].Name); <span class=\"hljs-comment\">// 正常</span>\n\n        Console.ReadLine();\n    }\n}\n</code></pre>\n<p>注意： 上面的代码虽然可以让我们少些很多代码，而且也减少了空异常，但是我们却需要小心使用，因为有的时候我们确实是需要抛出空异常，那么使用这个特性反而隐藏了Bug</p>\n<h2>三、 NameOf</h2>\n<p>过去，我们有很多的地方需要些硬字符串，导致重构比较困难，而且一旦敲错字母很难察觉出来，比如</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">if</span> (role == <span class=\"hljs-string\">\"admin\"</span>)\n{\n}\n</code></pre>\n<p>WPF 也经常有这样的代码</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">string</span> Name\n{\n  <span class=\"hljs-keyword\">get</span> { <span class=\"hljs-keyword\">return</span> name; }\n  <span class=\"hljs-keyword\">set</span>\n  {\n      name= <span class=\"hljs-keyword\">value</span>;\n      RaisePropertyChanged(<span class=\"hljs-string\">\"Name\"</span>);\n  }\n}\n</code></pre>\n<p>现在有了C#6 NameOf后，我们可以这样</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">string</span> Name\n{\n  <span class=\"hljs-keyword\">get</span> { <span class=\"hljs-keyword\">return</span> name; }\n  <span class=\"hljs-keyword\">set</span>\n  {\n      name= <span class=\"hljs-keyword\">value</span>;\n      RaisePropertyChanged(NameOf(Name));\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n{\n    Console.WriteLine(<span class=\"hljs-keyword\">nameof</span>(User.Name)); <span class=\"hljs-comment\">//  output: Name</span>\n    Console.WriteLine(<span class=\"hljs-keyword\">nameof</span>(System.Linq)); <span class=\"hljs-comment\">// output: Linq</span>\n    Console.WriteLine(<span class=\"hljs-keyword\">nameof</span>(List&lt;User&gt;)); <span class=\"hljs-comment\">// output: List</span>\n    Console.ReadLine();\n}\n</code></pre>\n<p>注意： NameOf只会返回Member的字符串，如果前面有对象或者命名空间，NameOf只会返回 . 的最后一部分, 另外NameOf有很多情况是不支持的，比如方法，关键字，对象的实例以及字符串和表达式</p>\n<h2>四、在Catch和Finally里使用Await</h2>\n<p>在之前的版本里，C#开发团队认为在Catch和Finally里使用Await是不可能，而现在他们在C#6里实现了它。</p>\n<pre><code class=\"language-C#\">Resource res = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">try</span>\n{\n    res = <span class=\"hljs-keyword\">await</span> Resource.OpenAsync(); <span class=\"hljs-comment\">// You could always do this.  </span>\n}\n<span class=\"hljs-keyword\">catch</span> (ResourceException e)\n{\n    <span class=\"hljs-keyword\">await</span> Resource.LogAsync(res, e); <span class=\"hljs-comment\">// Now you can do this … </span>\n} \n<span class=\"hljs-keyword\">finally</span>\n{\n    <span class=\"hljs-keyword\">if</span> (res != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">await</span> res.CloseAsync(); <span class=\"hljs-comment\">// … and this.</span>\n}\n</code></pre>\n<h2>五、表达式方法体</h2>\n<p>一句话的方法体可以直接写成箭头函数，而不再需要大括号</p>\n<pre><code class=\"language-C#\"> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Program</span>\n {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">string</span> <span class=\"hljs-title\">SayHello</span>(<span class=\"hljs-params\"></span>)</span> =&gt; <span class=\"hljs-string\">\"Hello World\"</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">string</span> <span class=\"hljs-title\">JackSayHello</span>(<span class=\"hljs-params\"></span>)</span> =&gt; <span class=\"hljs-string\">$\"Jack <span class=\"hljs-subst\">{SayHello()}</span>\"</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n    {\n        Console.WriteLine(SayHello());\n        Console.WriteLine(JackSayHello());\n        \n        Console.ReadLine();\n    }\n}\n</code></pre>\n<h2>六、自动属性初始化器</h2>\n<p>之前我们需要赋初始化值，一般需要这样</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> Age { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>)</span>\n    {\n        Age = <span class=\"hljs-number\">100</span>;\n    }\n}\n</code></pre>\n<p>但是C# 6的新特性里我们这样赋值</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> Age { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; } = <span class=\"hljs-number\">100</span>;\n}\n</code></pre>\n<h2>七、只读自动属性</h2>\n<p>C# 1里我们可以这样实现只读属性</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age=<span class=\"hljs-number\">100</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> Age\n    {\n        <span class=\"hljs-keyword\">get</span> { <span class=\"hljs-keyword\">return</span> age; }\n    }\n}\n</code></pre>\n<p>但是当我们有自动属性时，我们没办法实行只读属性，因为自动属性不支持readonly关键字，所以我们只能缩小访问权限</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n{\n    <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-keyword\">int</span> Age { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\n   \n}\n</code></pre>\n<p>但是 C#6里我们可以实现readonly的自动属性了</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> Age { <span class=\"hljs-keyword\">get</span>; } = <span class=\"hljs-number\">100</span>;\n}\n</code></pre>\n<h2>八、异常过滤器 Exception Filter</h2>\n<pre><code class=\"language-C#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n{\n\n    <span class=\"hljs-keyword\">try</span>\n    {\n        <span class=\"hljs-keyword\">throw</span>  <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">\"Age\"</span>);\n    }\n    <span class=\"hljs-keyword\">catch</span> (ArgumentException argumentException) when( argumentException.Message.Equals(<span class=\"hljs-string\">\"Name\"</span>))\n    {\n        <span class=\"hljs-keyword\">throw</span>  <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">\"Name Exception\"</span>);\n\n    }\n\n    <span class=\"hljs-keyword\">catch</span> (ArgumentException argumentException) when( argumentException.Message.Equals(<span class=\"hljs-string\">\"Age\"</span>))\n    {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Exception(<span class=\"hljs-string\">\"not handle\"</span>);\n        \n    }\n    <span class=\"hljs-keyword\">catch</span>  (Exception e)\n    {\n        \n        <span class=\"hljs-keyword\">throw</span>;\n    }\n}\n</code></pre>\n<p>在之前，一种异常只能被Catch一次，现在有了Filter后可以对相同的异常进行过滤，至于有什么用，那就是见仁见智了，我觉得上面的例子，定义两个具体的异常 NameArgumentException 和AgeArgumentException代码更易读。</p>\n<h2>九、 Index 初始化器</h2>\n<p>这个主要是用在Dictionary上，至于有什么用，我目前没感觉到有一点用处，谁能知道很好的使用场景，欢迎补充:</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">var</span> names = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">string</span>&gt;\n{\n    [<span class=\"hljs-meta\">1</span>] = <span class=\"hljs-string\">\"Jack\"</span>,\n    [<span class=\"hljs-meta\">2</span>] = <span class=\"hljs-string\">\"Alex\"</span>,\n    [<span class=\"hljs-meta\">3</span>] = <span class=\"hljs-string\">\"Eric\"</span>,\n    [<span class=\"hljs-meta\">4</span>] = <span class=\"hljs-string\">\"Jo\"</span>\n};\n\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> item <span class=\"hljs-keyword\">in</span> names)\n{\n    Console.WriteLine(<span class=\"hljs-string\">$\"<span class=\"hljs-subst\">{item.Key}</span> = <span class=\"hljs-subst\">{item.Value}</span>\"</span>);\n}\n</code></pre>\n<h2>十、using 静态类的方法可以使用 static using</h2>\n<p>这个功能在我看来，同样是很没有用的功能，也为去掉前缀有的时候我们不知道这个是来自哪里的，而且如果有一个同名方法不知道具体用哪个，当然经证实是使用类本身的覆盖，但是容易搞混不是吗？</p>\n<pre><code class=\"language-C#\"><span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">static</span> System.Math;\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CSharp6NewFeatures</span>\n {\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Program</span>\n  {\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n    {\n        Console.WriteLine(Log10(<span class=\"hljs-number\">5</span>)+PI);\n    }\n  }\n}\n</code></pre>\n<p>总结\n上面一到八我认为都是比较有用的新特性，后面的几个我觉得用处不大，当然如果找到合适的使用场景应该有用，欢迎大家补充。\n最后，祝大家编程愉快。</p>\n",
  "link": "\\zh-cn\\blog\\net\\c_sharp.html",
  "meta": {}
}