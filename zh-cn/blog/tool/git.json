{
  "filename": "git.md",
  "__html": "<h1>Git 常用命令速查手册</h1>\n<p><img src=\"./../img/git1.png\" alt=\"git\" title=\"git\"></p>\n<h2>初始化仓库</h2>\n<pre><code class=\"language-s\">git init\n</code></pre>\n<h2>设置远程仓库地址后再做push</h2>\n<p>''' s\ngit remote add origin <a href=\"https://gitee.com/useraddress/HelloGitee.git\">https://gitee.com/useraddress/HelloGitee.git</a>\n'''</p>\n<h2>将文件添加到仓库</h2>\n<pre><code class=\"language-s\">git add 文件名 # 将工作区的某个文件添加到暂存区\ngit add -u # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件\ngit add -A # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件\ngit add . # 将当前工作区的所有文件都加入暂存区\ngit add -i # 进入交互界面模式，按需添加文件到缓存区\n</code></pre>\n<h2>将暂存区文件提交到本地仓库</h2>\n<pre><code class=\"language-s\">git commit -m &quot;提交说明&quot; # 将暂存区内容提交到本地仓库\ngit commit -a -m &quot;提交说明&quot; # 跳过缓存区操作，直接把工作区内容提交到本地仓库\n</code></pre>\n<h2>查看仓库当前状态</h2>\n<pre><code class=\"language-s\">git status\n</code></pre>\n<h2>比较文件异同</h2>\n<pre><code class=\"language-s\">git diff # 工作区与暂存区的差异\ngit diff 分支名 #工作区与某分支的差异，远程分支这样写：remotes/origin/分支名\ngit diff HEAD  # 工作区与HEAD指针指向的内容差异\ngit diff 提交id 文件路径 # 工作区某文件当前版本与历史版本的差异\ngit diff --stage # 工作区文件与上次提交的差异(1.6 版本前用 --cached)\ngit diff 版本TAG # 查看从某个版本后都改动内容\ngit diff 分支A 分支B # 比较从分支A和分支B的差异(也支持比较两个TAG)\ngit diff 分支A...分支B # 比较两分支在分开后各自的改动\n\n# 另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 --stat 参数\n</code></pre>\n<h2>查看历史记录</h2>\n<pre><code class=\"language-s\">git log # 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)\ngit log -p -次数 # 查看最近多少次的提交记录\ngit log --stat # 简略显示每次提交的内容更改\ngit log --name-only # 仅显示已修改的文件清单\ngit log --name-status # 显示新增，修改，删除的文件清单\ngit log --oneline # 让提交记录以精简的一行输出\ngit log –graph –all --online # 图形展示分支的合并历史\ngit log --author=作者  # 查询作者的提交记录(和grep同时使用要加一个--all--match参数)\ngit log --grep=过滤信息 # 列出提交信息中包含过滤信息的提交记录\ngit log -S查询内容 # 和--grep类似，S和查询内容间没有空格\ngit log fileName # 查看某文件的修改记录，找背锅专用\n</code></pre>\n<h2>代码回滚</h2>\n<pre><code class=\"language-s\">git reset HEAD^ # 恢复成上次提交的版本\ngit reset HEAD^^ # 恢复成上上次提交的版本，就是多个^，以此类推或用~次数\n\ngit reflog\n\ngit reset --hard 版本号\n\n--soft：只是改变HEAD指针指向，缓存区和工作区不变；\n--mixed：修改HEAD指针指向，暂存区内容丢失，工作区不变；\n--hard：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态；\n</code></pre>\n<h2>同步远程仓库</h2>\n<pre><code class=\"language-s\">git push -u origin master\n</code></pre>\n<h2>删除版本库文件</h2>\n<pre><code class=\"language-s\">git rm 文件名\n</code></pre>\n<h2>版本库里的版本替换工作区的版本</h2>\n<pre><code class=\"language-s\">git checkout -- test.txt\n</code></pre>\n<h2>本地仓库内容推送到远程仓库</h2>\n<pre><code class=\"language-s\">git remote add origin git@github.com:帐号名/仓库名.git\n</code></pre>\n<h2>将本地仓库内容推送到远程仓库</h2>\n<p>''' s\ngit add . #将当前目录所有文件添加到git暂存区\ngit commit -m &quot;my first commit&quot; #提交并备注提交信息\ngit push origin master #将本地提交推送到远程仓库\n'''</p>\n<h2>从远程仓库克隆项目到本地</h2>\n<pre><code class=\"language-s\">git clone git@github.com:git帐号名/仓库名.git\n</code></pre>\n<h2>创建分支</h2>\n<pre><code class=\"language-s\">git checkout -b dev\n-b表示创建并切换分支\n上面一条命令相当于一面的二条：\ngit branch dev //创建分支\ngit checkout dev //切换分支\n</code></pre>\n<h2>查看分支</h2>\n<pre><code class=\"language-s\">git branch\n</code></pre>\n<h2>合并分支</h2>\n<pre><code class=\"language-s\">git merge dev\n//用于合并指定分支到当前分支\n\ngit merge --no-ff -m &quot;merge with no-ff&quot; dev\n//加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并\n</code></pre>\n<h2>删除分支</h2>\n<pre><code class=\"language-s\">git branch -d dev\n</code></pre>\n<h2>查看分支合并图</h2>\n<pre><code class=\"language-s\">git log --graph --pretty=oneline --abbrev-commit\n</code></pre>\n<h2>查看远程库信息</h2>\n<pre><code class=\"language-s\">git remote\n// -v 显示更详细的信息\n</code></pre>\n<h2>git相关配置</h2>\n<pre><code class=\"language-s\"># 安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)：\ngit config --global user.name &quot;用户名&quot; # 设置用户名\ngit config --global user.email &quot;用户邮箱&quot;   #设置邮箱\ngit config --global user.name   # 查看用户名是否配置成功\ngit config --global user.email   # 查看邮箱是否配置\n\n# 其他查看配置相关\ngit config --global --list  # 查看全局设置相关参数列表\ngit config --local --list # 查看本地设置相关参数列表\ngit config --system --list # 查看系统配置参数列表\ngit config --list  # 查看所有Git的配置(全局+本地+系统)\ngit config --global color.ui true //显示git相关颜色\n</code></pre>\n<h2>撤消某次提交</h2>\n<pre><code class=\"language-s\">git revert HEAD # 撤销最近的一个提交\ngit revert 版本号 # 撤销某次commit\n</code></pre>\n<h2>拉取远程分支到本地仓库</h2>\n<pre><code class=\"language-s\">git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支\ngit fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需checkout\ngit branch --set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接\n</code></pre>\n<h2>标签命令</h2>\n<pre><code class=\"language-s\">git tag 标签 //打标签命令，默认为HEAD\ngit tag //显示所有标签\ngit tag 标签 �版本号 //给某个commit版本添加标签\ngit show 标签 //显示某个标签的详细信息\n</code></pre>\n<h2>同步远程仓库更新</h2>\n<pre><code class=\"language-s\">git fetch  origin master\n //从远程获取最新的到本地，首先从远程的origin的master主分支下载最新的版本到origin/master分支上，然后比较本地的master分支和origin/master分支的差别，最后进行合并。\n\ngit fetch比git pull更加安全\ngit pull origin master\n</code></pre>\n<h2>推送时选择强制推送</h2>\n<p>强制推送需要执行下面的命令(默认不推荐该行为)：</p>\n<pre><code class=\"language-s\">git push origin master -f\n</code></pre>\n<h2>git 提示授权失败解决</h2>\n<pre><code class=\"language-s\">git config --system --unset credential.helper # 管理员权限执行命令\n</code></pre>\n<h2>git 授权永久有效</h2>\n<pre><code class=\"language-s\">git config --global credential.helper 'store'\n</code></pre>\n<h2>程序员的那些迷之缩写</h2>\n<p>就像你可能不知道 现充 其实是 现实生活很充实的人生赢家 的缩写一样，我们经常看到 Github 上的码农们在 code review 时，把乱七八糟的缩写写得到处都是——娴熟的司机们都会使用缩写来达到提高逼格的效果——我们第一次看到时还是会出现一脸懵逼的状况，这里整理一下这些缩写都是什么含义，以后我们也可以欢快地装逼了。</p>\n<ol>\n<li>\n<p>PR: Pull Request. 拉取请求，给其他项目提交代码</p>\n</li>\n<li>\n<p>LGTM: Looks Good To Me. 朕知道了 代码已经过 review，可以合并</p>\n</li>\n<li>\n<p>SGTM: Sounds Good To Me. 和上面那句意思差不多，也是已经通过了 review 的意思</p>\n</li>\n<li>\n<p>WIP: Work In Progress. 传说中提 PR 的最佳实践是，如果你有个改动很大的 PR，可以在写了一部分的情况下先提交，但是在标题里写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码。</p>\n</li>\n<li>\n<p>PTAL: Please Take A Look. 你来瞅瞅？用来提示别人来看一下</p>\n</li>\n<li>\n<p>TBR: To Be Reviewed. 提示维护者进行 review</p>\n</li>\n<li>\n<p>TL , DR: Too Long; Didn't Read. 太长懒得看。也有很多文档在做简略描述之前会写这么一句</p>\n</li>\n<li>\n<p>TBD: To Be Done(or Defined/Discussed/Decided/Determined). 根据语境不同意义有所区别，但一般都是还没搞定的意思</p>\n</li>\n<li>\n<p>PRD : Product Requirement Document. 产品需求文档</p>\n</li>\n</ol>\n",
  "link": "\\zh-cn\\blog\\tool\\git.html",
  "meta": {}
}